/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.protoStore
{
	public partial class changelogStore : Meridian.IEntityStore, admin.db.IDataService<proto.changelog>
	{
		public changelogStore()
		{
			m_Items = new SortedList<long, proto.changelog>();
		}
		private SortedList<long, proto.changelog> m_Items;
		public void Commit()
		{
			//throw new NotImplementedException();
		}
		public IQueryable<proto.changelog> GetAll()
		{
			return Queryable.AsQueryable<proto.changelog>(All());
		}
		public proto.changelog GetById(long id)
		{
			return Get(id);
		}
		void admin.db.IDataService<proto.changelog>.Insert(proto.changelog item)
		{
			Insert(item);
		}
		void admin.db.IDataService<proto.changelog>.Delete(proto.changelog item)
		{
			Delete(item);
		}
		public proto.changelog CreateItem()
		{
			return new proto.changelog() {   };
		}
		public void AbortItem(proto.changelog item)
		{
			Delete(item);
		}
		public void Discard()
		{
			;
		}
		void admin.db.IDataService<proto.changelog>.Update(proto.changelog item)
		{
			Persist(item);
		}
		public object GetObject(long _id)
		{
			return Get(_id);
		}
		public System.Type GetObjectType()
		{
			return typeof(proto.changelog);
		}
		public void DeleteById(long _id)
		{
			Delete(Get(_id));
		}
		public void UpdateById(long _id)
		{
			Update(Get(_id));
		}
		public void LoadAggregations(Meridian _meridian)
		{
			foreach(var item in m_Items.Values)
			{
				item.LoadAggregations(_meridian);
			}
		}
		public void Select(MySqlConnection _connection)
		{
			var cmd = new MySqlCommand("SELECT `changeid`, `folder`, `scriptnumber`, `scriptname`, `startdate`, `completedate`, `appliedby`, `scriptstatus`, `scriptoutput` FROM changelog");
			cmd.Connection = _connection;
			using(var reader = cmd.ExecuteReader())
			{
				while(reader.Read())
				{
					var item = new proto.changelog();
					item.LoadFromReader(reader);
					m_Items[item.changeid] = item;
				}
			}
		}
		public proto.changelog Insert(MySqlConnection _connection, proto.changelog _item)
		{
			var cmd = new MySqlCommand("INSERT INTO changelog ( `changeid`, `folder`, `scriptnumber`, `scriptname`, `startdate`, `completedate`, `appliedby`, `scriptstatus`, `scriptoutput` ) VALUES ( @changeid, @folder, @scriptnumber, @scriptname, @startdate, @completedate, @appliedby, @scriptstatus, @scriptoutput ); SELECT LAST_INSERT_ID();"); ;
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "changeid", Value = _item.changeid });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "folder", Value = _item.folder });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "scriptnumber", Value = _item.scriptnumber });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "scriptname", Value = _item.scriptname });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "startdate", Value = (_item.startdate != null && _item.startdate.Year > 1800) ? _item.startdate : new DateTime(1800, 1, 1) });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "completedate", Value = (_item.completedate != null && _item.completedate.Year > 1800) ? _item.completedate : new DateTime(1800, 1, 1) });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "appliedby", Value = _item.appliedby });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "scriptstatus", Value = _item.scriptstatus });
			cmd.Parameters.Add( new MySqlParameter() { ParameterName = "scriptoutput", Value = _item.scriptoutput });
			cmd.Connection = _connection;
			cmd.ExecuteScalar();
			m_Items.Add(_item.changeid, _item);
			_item.LoadAggregations(Meridian.Default);
			return _item;
		}
		public proto.changelog Update(MySqlConnection _connection, proto.changelog _item)
		{
			return _item;
		}
		public proto.changelog Delete(MySqlConnection _connection, proto.changelog _item)
		{
			return _item;
		}
		public proto.changelog Insert(proto.changelog _item)
		{
			MeridianMonitor.Default.MySqlActionForeground((conn) => Insert(conn, _item));;
			return _item;
		}
		public proto.changelog Persist(proto.changelog _item)
		{
			if(_item.id <= 0)
			{
				_item = Insert(_item);
			}
			_item = Update(_item);
			return _item;
		}
		public proto.changelog Delete(proto.changelog _item)
		{
			return _item;
		}
		public proto.changelog Update(proto.changelog _item)
		{
			MeridianMonitor.Default.MySqlActionBackground((conn) => Update(conn, _item));;
			return _item;
		}
		public IList<proto.changelog> All()
		{
			return m_Items.Values;
		}
		public proto.changelog Get(long _id)
		{
			return m_Items[_id];
		}
		public bool Exists(long _id)
		{
			return m_Items.ContainsKey(_id);
		}
	}
}
