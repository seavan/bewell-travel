/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using meridian.core;
using MySql.Data.MySqlClient;
using meridian.bewell;

namespace meridian.bewell.system
{
	public partial class Meridian
	{
		public interface IEntityStore
		{
			object GetObject(long _id);
			Type GetObjectType();
			void DeleteById(long _id);
			void UpdateById(long _id);
            bool Exists(long id);
		}
		public Meridian()
		{
		}
		public void Init(string _connection)
		{
			ConnectionString = _connection;
			using(var connection = new MySqlConnection(_connection))
			{
				m_Meridian = new Meridian();
				m_Meridian.ConnectionString = _connection;
				connection.Open();
				m_Meridian.Load(connection);
				connection.Close();
			}
		}
		public void Load(MySqlConnection _connection)
		{
			var now = new DateTime();
			changelogStore = new protoStore.changelogStore();
			m_Stores["changelog"] = changelogStore;
			now = DateTime.Now;
			changelogStore.Select(_connection);
			m_LoadingTimes["changelog select"] = (DateTime.Now - now).TotalMilliseconds;
			citationsStore = new protoStore.citationsStore();
			m_Stores["citations"] = citationsStore;
			now = DateTime.Now;
			citationsStore.Select(_connection);
			m_LoadingTimes["citations select"] = (DateTime.Now - now).TotalMilliseconds;
			propertiesStore = new protoStore.propertiesStore();
			m_Stores["properties"] = propertiesStore;
			now = DateTime.Now;
			propertiesStore.Select(_connection);
			m_LoadingTimes["properties select"] = (DateTime.Now - now).TotalMilliseconds;
			gendersStore = new protoStore.gendersStore();
			m_Stores["genders"] = gendersStore;
			now = DateTime.Now;
			gendersStore.Select(_connection);
			m_LoadingTimes["genders select"] = (DateTime.Now - now).TotalMilliseconds;
			deseasesStore = new protoStore.deseasesStore();
			m_Stores["deseases"] = deseasesStore;
			now = DateTime.Now;
			deseasesStore.Select(_connection);
			m_LoadingTimes["deseases select"] = (DateTime.Now - now).TotalMilliseconds;
			territory_categoriesStore = new protoStore.territory_categoriesStore();
			m_Stores["territory_categories"] = territory_categoriesStore;
			now = DateTime.Now;
			territory_categoriesStore.Select(_connection);
			m_LoadingTimes["territory_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			countriesStore = new protoStore.countriesStore();
			m_Stores["countries"] = countriesStore;
			now = DateTime.Now;
			countriesStore.Select(_connection);
			m_LoadingTimes["countries select"] = (DateTime.Now - now).TotalMilliseconds;
			regionsStore = new protoStore.regionsStore();
			m_Stores["regions"] = regionsStore;
			now = DateTime.Now;
			regionsStore.Select(_connection);
			m_LoadingTimes["regions select"] = (DateTime.Now - now).TotalMilliseconds;
			entity_fieldsStore = new protoStore.entity_fieldsStore();
			m_Stores["entity_fields"] = entity_fieldsStore;
			now = DateTime.Now;
			entity_fieldsStore.Select(_connection);
			m_LoadingTimes["entity_fields select"] = (DateTime.Now - now).TotalMilliseconds;
			fieldset_fields_orderStore = new protoStore.fieldset_fields_orderStore();
			m_Stores["fieldset_fields_order"] = fieldset_fields_orderStore;
			now = DateTime.Now;
			fieldset_fields_orderStore.Select(_connection);
			m_LoadingTimes["fieldset_fields_order select"] = (DateTime.Now - now).TotalMilliseconds;
			resort_zonesStore = new protoStore.resort_zonesStore();
			m_Stores["resort_zones"] = resort_zonesStore;
			now = DateTime.Now;
			resort_zonesStore.Select(_connection);
			m_LoadingTimes["resort_zones select"] = (DateTime.Now - now).TotalMilliseconds;
			news_categoriesStore = new protoStore.news_categoriesStore();
			m_Stores["news_categories"] = news_categoriesStore;
			now = DateTime.Now;
			news_categoriesStore.Select(_connection);
			m_LoadingTimes["news_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			pages_filesStore = new protoStore.pages_filesStore();
			m_Stores["pages_files"] = pages_filesStore;
			now = DateTime.Now;
			pages_filesStore.Select(_connection);
			m_LoadingTimes["pages_files select"] = (DateTime.Now - now).TotalMilliseconds;
			dictionaryStore = new protoStore.dictionaryStore();
			m_Stores["dictionary"] = dictionaryStore;
			now = DateTime.Now;
			dictionaryStore.Select(_connection);
			m_LoadingTimes["dictionary select"] = (DateTime.Now - now).TotalMilliseconds;
			newsStore = new protoStore.newsStore();
			m_Stores["news"] = newsStore;
			now = DateTime.Now;
			newsStore.Select(_connection);
			m_LoadingTimes["news select"] = (DateTime.Now - now).TotalMilliseconds;
			territoriesStore = new protoStore.territoriesStore();
			m_Stores["territories"] = territoriesStore;
			now = DateTime.Now;
			territoriesStore.Select(_connection);
			m_LoadingTimes["territories select"] = (DateTime.Now - now).TotalMilliseconds;
			accounts_snaStore = new protoStore.accounts_snaStore();
			m_Stores["accounts_sna"] = accounts_snaStore;
			now = DateTime.Now;
			accounts_snaStore.Select(_connection);
			m_LoadingTimes["accounts_sna select"] = (DateTime.Now - now).TotalMilliseconds;
			questionsStore = new protoStore.questionsStore();
			m_Stores["questions"] = questionsStore;
			now = DateTime.Now;
			questionsStore.Select(_connection);
			m_LoadingTimes["questions select"] = (DateTime.Now - now).TotalMilliseconds;
			accountsStore = new protoStore.accountsStore();
			m_Stores["accounts"] = accountsStore;
			now = DateTime.Now;
			accountsStore.Select(_connection);
			m_LoadingTimes["accounts select"] = (DateTime.Now - now).TotalMilliseconds;
			pagesStore = new protoStore.pagesStore();
			m_Stores["pages"] = pagesStore;
			now = DateTime.Now;
			pagesStore.Select(_connection);
			m_LoadingTimes["pages select"] = (DateTime.Now - now).TotalMilliseconds;
			seo_metadataStore = new protoStore.seo_metadataStore();
			m_Stores["seo_metadata"] = seo_metadataStore;
			now = DateTime.Now;
			seo_metadataStore.Select(_connection);
			m_LoadingTimes["seo_metadata select"] = (DateTime.Now - now).TotalMilliseconds;
			fieldsetsStore = new protoStore.fieldsetsStore();
			m_Stores["fieldsets"] = fieldsetsStore;
			now = DateTime.Now;
			fieldsetsStore.Select(_connection);
			m_LoadingTimes["fieldsets select"] = (DateTime.Now - now).TotalMilliseconds;
			commentsStore = new protoStore.commentsStore();
			m_Stores["comments"] = commentsStore;
			now = DateTime.Now;
			commentsStore.Select(_connection);
			m_LoadingTimes["comments select"] = (DateTime.Now - now).TotalMilliseconds;
			entity_photosStore = new protoStore.entity_photosStore();
			m_Stores["entity_photos"] = entity_photosStore;
			now = DateTime.Now;
			entity_photosStore.Select(_connection);
			m_LoadingTimes["entity_photos select"] = (DateTime.Now - now).TotalMilliseconds;
			field_valuesStore = new protoStore.field_valuesStore();
			m_Stores["field_values"] = field_valuesStore;
			now = DateTime.Now;
			field_valuesStore.Select(_connection);
			m_LoadingTimes["field_values select"] = (DateTime.Now - now).TotalMilliseconds;
			pricesStore = new protoStore.pricesStore();
			m_Stores["prices"] = pricesStore;
			now = DateTime.Now;
			pricesStore.Select(_connection);
			m_LoadingTimes["prices select"] = (DateTime.Now - now).TotalMilliseconds;
			property_categoriesStore = new protoStore.property_categoriesStore();
			m_Stores["property_categories"] = property_categoriesStore;
			now = DateTime.Now;
			property_categoriesStore.Select(_connection);
			m_LoadingTimes["property_categories select"] = (DateTime.Now - now).TotalMilliseconds;
			cure_profilesStore = new protoStore.cure_profilesStore();
			m_Stores["cure_profiles"] = cure_profilesStore;
			now = DateTime.Now;
			cure_profilesStore.Select(_connection);
			m_LoadingTimes["cure_profiles select"] = (DateTime.Now - now).TotalMilliseconds;
			hotel_classesStore = new protoStore.hotel_classesStore();
			m_Stores["hotel_classes"] = hotel_classesStore;
			now = DateTime.Now;
			hotel_classesStore.Select(_connection);
			m_LoadingTimes["hotel_classes select"] = (DateTime.Now - now).TotalMilliseconds;
			hotelsStore = new protoStore.hotelsStore();
			m_Stores["hotels"] = hotelsStore;
			now = DateTime.Now;
			hotelsStore.Select(_connection);
			m_LoadingTimes["hotels select"] = (DateTime.Now - now).TotalMilliseconds;
			resortsStore = new protoStore.resortsStore();
			m_Stores["resorts"] = resortsStore;
			now = DateTime.Now;
			resortsStore.Select(_connection);
			m_LoadingTimes["resorts select"] = (DateTime.Now - now).TotalMilliseconds;
			health_factorsStore = new protoStore.health_factorsStore();
			m_Stores["health_factors"] = health_factorsStore;
			now = DateTime.Now;
			health_factorsStore.Select(_connection);
			m_LoadingTimes["health_factors select"] = (DateTime.Now - now).TotalMilliseconds;
			treatment_optionsStore = new protoStore.treatment_optionsStore();
			m_Stores["treatment_options"] = treatment_optionsStore;
			now = DateTime.Now;
			treatment_optionsStore.Select(_connection);
			m_LoadingTimes["treatment_options select"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			changelogStore.LoadAggregations(this);
			m_LoadingTimes["changelog aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			citationsStore.LoadAggregations(this);
			m_LoadingTimes["citations aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			propertiesStore.LoadAggregations(this);
			m_LoadingTimes["properties aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			propertiesStore.LoadCompositions(this);
			m_LoadingTimes["properties compositions"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			gendersStore.LoadAggregations(this);
			m_LoadingTimes["genders aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			deseasesStore.LoadAggregations(this);
			m_LoadingTimes["deseases aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			deseasesStore.LoadCompositions(this);
			m_LoadingTimes["deseases compositions"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			territory_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["territory_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			countriesStore.LoadAggregations(this);
			m_LoadingTimes["countries aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			regionsStore.LoadAggregations(this);
			m_LoadingTimes["regions aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			entity_fieldsStore.LoadAggregations(this);
			m_LoadingTimes["entity_fields aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			entity_fieldsStore.LoadCompositions(this);
			m_LoadingTimes["entity_fields compositions"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			fieldset_fields_orderStore.LoadAggregations(this);
			m_LoadingTimes["fieldset_fields_order aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resort_zonesStore.LoadAggregations(this);
			m_LoadingTimes["resort_zones aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			news_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["news_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			pages_filesStore.LoadAggregations(this);
			m_LoadingTimes["pages_files aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			dictionaryStore.LoadAggregations(this);
			m_LoadingTimes["dictionary aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			newsStore.LoadAggregations(this);
			m_LoadingTimes["news aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			territoriesStore.LoadAggregations(this);
			m_LoadingTimes["territories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			accounts_snaStore.LoadAggregations(this);
			m_LoadingTimes["accounts_sna aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			questionsStore.LoadAggregations(this);
			m_LoadingTimes["questions aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			accountsStore.LoadAggregations(this);
			m_LoadingTimes["accounts aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			pagesStore.LoadAggregations(this);
			m_LoadingTimes["pages aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			seo_metadataStore.LoadAggregations(this);
			m_LoadingTimes["seo_metadata aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			fieldsetsStore.LoadAggregations(this);
			m_LoadingTimes["fieldsets aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			fieldsetsStore.LoadCompositions(this);
			m_LoadingTimes["fieldsets compositions"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			commentsStore.LoadAggregations(this);
			m_LoadingTimes["comments aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			entity_photosStore.LoadAggregations(this);
			m_LoadingTimes["entity_photos aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			field_valuesStore.LoadAggregations(this);
			m_LoadingTimes["field_values aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			pricesStore.LoadAggregations(this);
			m_LoadingTimes["prices aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			property_categoriesStore.LoadAggregations(this);
			m_LoadingTimes["property_categories aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			cure_profilesStore.LoadAggregations(this);
			m_LoadingTimes["cure_profiles aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			cure_profilesStore.LoadCompositions(this);
			m_LoadingTimes["cure_profiles compositions"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			hotel_classesStore.LoadAggregations(this);
			m_LoadingTimes["hotel_classes aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			hotelsStore.LoadAggregations(this);
			m_LoadingTimes["hotels aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			hotelsStore.LoadCompositions(this);
			m_LoadingTimes["hotels compositions"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resortsStore.LoadAggregations(this);
			m_LoadingTimes["resorts aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			resortsStore.LoadCompositions(this);
			m_LoadingTimes["resorts compositions"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			health_factorsStore.LoadAggregations(this);
			m_LoadingTimes["health_factors aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			health_factorsStore.LoadCompositions(this);
			m_LoadingTimes["health_factors compositions"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			treatment_optionsStore.LoadAggregations(this);
			m_LoadingTimes["treatment_options aggregations"] = (DateTime.Now - now).TotalMilliseconds;
			now = DateTime.Now;
			treatment_optionsStore.LoadCompositions(this);
			m_LoadingTimes["treatment_options compositions"] = (DateTime.Now - now).TotalMilliseconds;
		}
		public static Meridian Default
		{
			get
			{
				return m_Meridian;
			}
		}
		private static Meridian m_Meridian = new Meridian();
		public void TestStores()
		{
			Tracer.I.Debug("Loaded changelogStore: {0}", changelogStore.All().Count);
			Tracer.I.Debug("Loaded citationsStore: {0}", citationsStore.All().Count);
			Tracer.I.Debug("Loaded propertiesStore: {0}", propertiesStore.All().Count);
			Tracer.I.Debug("Loaded gendersStore: {0}", gendersStore.All().Count);
			Tracer.I.Debug("Loaded deseasesStore: {0}", deseasesStore.All().Count);
			Tracer.I.Debug("Loaded territory_categoriesStore: {0}", territory_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded countriesStore: {0}", countriesStore.All().Count);
			Tracer.I.Debug("Loaded regionsStore: {0}", regionsStore.All().Count);
			Tracer.I.Debug("Loaded entity_fieldsStore: {0}", entity_fieldsStore.All().Count);
			Tracer.I.Debug("Loaded fieldset_fields_orderStore: {0}", fieldset_fields_orderStore.All().Count);
			Tracer.I.Debug("Loaded resort_zonesStore: {0}", resort_zonesStore.All().Count);
			Tracer.I.Debug("Loaded news_categoriesStore: {0}", news_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded pages_filesStore: {0}", pages_filesStore.All().Count);
			Tracer.I.Debug("Loaded dictionaryStore: {0}", dictionaryStore.All().Count);
			Tracer.I.Debug("Loaded newsStore: {0}", newsStore.All().Count);
			Tracer.I.Debug("Loaded territoriesStore: {0}", territoriesStore.All().Count);
			Tracer.I.Debug("Loaded accounts_snaStore: {0}", accounts_snaStore.All().Count);
			Tracer.I.Debug("Loaded questionsStore: {0}", questionsStore.All().Count);
			Tracer.I.Debug("Loaded accountsStore: {0}", accountsStore.All().Count);
			Tracer.I.Debug("Loaded pagesStore: {0}", pagesStore.All().Count);
			Tracer.I.Debug("Loaded seo_metadataStore: {0}", seo_metadataStore.All().Count);
			Tracer.I.Debug("Loaded fieldsetsStore: {0}", fieldsetsStore.All().Count);
			Tracer.I.Debug("Loaded commentsStore: {0}", commentsStore.All().Count);
			Tracer.I.Debug("Loaded entity_photosStore: {0}", entity_photosStore.All().Count);
			Tracer.I.Debug("Loaded field_valuesStore: {0}", field_valuesStore.All().Count);
			Tracer.I.Debug("Loaded pricesStore: {0}", pricesStore.All().Count);
			Tracer.I.Debug("Loaded property_categoriesStore: {0}", property_categoriesStore.All().Count);
			Tracer.I.Debug("Loaded cure_profilesStore: {0}", cure_profilesStore.All().Count);
			Tracer.I.Debug("Loaded hotel_classesStore: {0}", hotel_classesStore.All().Count);
			Tracer.I.Debug("Loaded hotelsStore: {0}", hotelsStore.All().Count);
			Tracer.I.Debug("Loaded resortsStore: {0}", resortsStore.All().Count);
			Tracer.I.Debug("Loaded health_factorsStore: {0}", health_factorsStore.All().Count);
			Tracer.I.Debug("Loaded treatment_optionsStore: {0}", treatment_optionsStore.All().Count);
		}
		public void PassUpdate(MySqlConnection _conn, string _protoName, int _action, long _protoId)
		{
			switch (_protoName)
			{
				case "citations":
				switch (_action)
				{
					case 0: citationsStore.InsertSync(_conn, _protoId, this); break;
					case 1: citationsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: citationsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "properties":
				switch (_action)
				{
					case 0: propertiesStore.InsertSync(_conn, _protoId, this); break;
					case 1: propertiesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: propertiesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "genders":
				switch (_action)
				{
					case 0: gendersStore.InsertSync(_conn, _protoId, this); break;
					case 1: gendersStore.UpdateSync(_conn, _protoId, this); break;
					case 2: gendersStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "deseases":
				switch (_action)
				{
					case 0: deseasesStore.InsertSync(_conn, _protoId, this); break;
					case 1: deseasesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: deseasesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "territory_categories":
				switch (_action)
				{
					case 0: territory_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: territory_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: territory_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "countries":
				switch (_action)
				{
					case 0: countriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: countriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: countriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "regions":
				switch (_action)
				{
					case 0: regionsStore.InsertSync(_conn, _protoId, this); break;
					case 1: regionsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: regionsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "entity_fields":
				switch (_action)
				{
					case 0: entity_fieldsStore.InsertSync(_conn, _protoId, this); break;
					case 1: entity_fieldsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: entity_fieldsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "fieldset_fields_order":
				switch (_action)
				{
					case 0: fieldset_fields_orderStore.InsertSync(_conn, _protoId, this); break;
					case 1: fieldset_fields_orderStore.UpdateSync(_conn, _protoId, this); break;
					case 2: fieldset_fields_orderStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "resort_zones":
				switch (_action)
				{
					case 0: resort_zonesStore.InsertSync(_conn, _protoId, this); break;
					case 1: resort_zonesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: resort_zonesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "news_categories":
				switch (_action)
				{
					case 0: news_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: news_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: news_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "pages_files":
				switch (_action)
				{
					case 0: pages_filesStore.InsertSync(_conn, _protoId, this); break;
					case 1: pages_filesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: pages_filesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "dictionary":
				switch (_action)
				{
					case 0: dictionaryStore.InsertSync(_conn, _protoId, this); break;
					case 1: dictionaryStore.UpdateSync(_conn, _protoId, this); break;
					case 2: dictionaryStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "news":
				switch (_action)
				{
					case 0: newsStore.InsertSync(_conn, _protoId, this); break;
					case 1: newsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: newsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "territories":
				switch (_action)
				{
					case 0: territoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: territoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: territoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "accounts_sna":
				switch (_action)
				{
					case 0: accounts_snaStore.InsertSync(_conn, _protoId, this); break;
					case 1: accounts_snaStore.UpdateSync(_conn, _protoId, this); break;
					case 2: accounts_snaStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "questions":
				switch (_action)
				{
					case 0: questionsStore.InsertSync(_conn, _protoId, this); break;
					case 1: questionsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: questionsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "accounts":
				switch (_action)
				{
					case 0: accountsStore.InsertSync(_conn, _protoId, this); break;
					case 1: accountsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: accountsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "pages":
				switch (_action)
				{
					case 0: pagesStore.InsertSync(_conn, _protoId, this); break;
					case 1: pagesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: pagesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "seo_metadata":
				switch (_action)
				{
					case 0: seo_metadataStore.InsertSync(_conn, _protoId, this); break;
					case 1: seo_metadataStore.UpdateSync(_conn, _protoId, this); break;
					case 2: seo_metadataStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "fieldsets":
				switch (_action)
				{
					case 0: fieldsetsStore.InsertSync(_conn, _protoId, this); break;
					case 1: fieldsetsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: fieldsetsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "comments":
				switch (_action)
				{
					case 0: commentsStore.InsertSync(_conn, _protoId, this); break;
					case 1: commentsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: commentsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "entity_photos":
				switch (_action)
				{
					case 0: entity_photosStore.InsertSync(_conn, _protoId, this); break;
					case 1: entity_photosStore.UpdateSync(_conn, _protoId, this); break;
					case 2: entity_photosStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "field_values":
				switch (_action)
				{
					case 0: field_valuesStore.InsertSync(_conn, _protoId, this); break;
					case 1: field_valuesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: field_valuesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "prices":
				switch (_action)
				{
					case 0: pricesStore.InsertSync(_conn, _protoId, this); break;
					case 1: pricesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: pricesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "property_categories":
				switch (_action)
				{
					case 0: property_categoriesStore.InsertSync(_conn, _protoId, this); break;
					case 1: property_categoriesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: property_categoriesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "cure_profiles":
				switch (_action)
				{
					case 0: cure_profilesStore.InsertSync(_conn, _protoId, this); break;
					case 1: cure_profilesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: cure_profilesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "hotel_classes":
				switch (_action)
				{
					case 0: hotel_classesStore.InsertSync(_conn, _protoId, this); break;
					case 1: hotel_classesStore.UpdateSync(_conn, _protoId, this); break;
					case 2: hotel_classesStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "hotels":
				switch (_action)
				{
					case 0: hotelsStore.InsertSync(_conn, _protoId, this); break;
					case 1: hotelsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: hotelsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "resorts":
				switch (_action)
				{
					case 0: resortsStore.InsertSync(_conn, _protoId, this); break;
					case 1: resortsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: resortsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "health_factors":
				switch (_action)
				{
					case 0: health_factorsStore.InsertSync(_conn, _protoId, this); break;
					case 1: health_factorsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: health_factorsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
				case "treatment_options":
				switch (_action)
				{
					case 0: treatment_optionsStore.InsertSync(_conn, _protoId, this); break;
					case 1: treatment_optionsStore.UpdateSync(_conn, _protoId, this); break;
					case 2: treatment_optionsStore.DeleteSync(_conn, _protoId, this); break;
				}
				break;
			}
		}
		/*
		                GO
		                IF OBJECT_ID ('citations_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.citations_insert;
		                GO
		                CREATE TRIGGER [dbo].[citations_insert]
		                   ON  [dbo].[citations]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('citations',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('citations_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.citations_update;
		                GO
		                CREATE TRIGGER [dbo].[citations_update]
		                   ON  [dbo].[citations]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('citations',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('citations_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.citations_delete;
		                GO
		                CREATE TRIGGER [dbo].[citations_delete]
		                   ON  [dbo].[citations]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('citations',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('properties_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.properties_insert;
		                GO
		                CREATE TRIGGER [dbo].[properties_insert]
		                   ON  [dbo].[properties]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('properties',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('properties_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.properties_update;
		                GO
		                CREATE TRIGGER [dbo].[properties_update]
		                   ON  [dbo].[properties]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('properties',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('properties_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.properties_delete;
		                GO
		                CREATE TRIGGER [dbo].[properties_delete]
		                   ON  [dbo].[properties]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('properties',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('genders_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.genders_insert;
		                GO
		                CREATE TRIGGER [dbo].[genders_insert]
		                   ON  [dbo].[genders]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('genders',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('genders_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.genders_update;
		                GO
		                CREATE TRIGGER [dbo].[genders_update]
		                   ON  [dbo].[genders]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('genders',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('genders_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.genders_delete;
		                GO
		                CREATE TRIGGER [dbo].[genders_delete]
		                   ON  [dbo].[genders]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('genders',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('deseases_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.deseases_insert;
		                GO
		                CREATE TRIGGER [dbo].[deseases_insert]
		                   ON  [dbo].[deseases]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('deseases',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('deseases_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.deseases_update;
		                GO
		                CREATE TRIGGER [dbo].[deseases_update]
		                   ON  [dbo].[deseases]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('deseases',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('deseases_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.deseases_delete;
		                GO
		                CREATE TRIGGER [dbo].[deseases_delete]
		                   ON  [dbo].[deseases]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('deseases',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('territory_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.territory_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[territory_categories_insert]
		                   ON  [dbo].[territory_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('territory_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('territory_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.territory_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[territory_categories_update]
		                   ON  [dbo].[territory_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('territory_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('territory_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.territory_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[territory_categories_delete]
		                   ON  [dbo].[territory_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('territory_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('countries_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.countries_insert;
		                GO
		                CREATE TRIGGER [dbo].[countries_insert]
		                   ON  [dbo].[countries]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('countries',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('countries_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.countries_update;
		                GO
		                CREATE TRIGGER [dbo].[countries_update]
		                   ON  [dbo].[countries]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('countries',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('countries_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.countries_delete;
		                GO
		                CREATE TRIGGER [dbo].[countries_delete]
		                   ON  [dbo].[countries]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('countries',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('regions_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.regions_insert;
		                GO
		                CREATE TRIGGER [dbo].[regions_insert]
		                   ON  [dbo].[regions]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('regions',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('regions_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.regions_update;
		                GO
		                CREATE TRIGGER [dbo].[regions_update]
		                   ON  [dbo].[regions]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('regions',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('regions_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.regions_delete;
		                GO
		                CREATE TRIGGER [dbo].[regions_delete]
		                   ON  [dbo].[regions]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('regions',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('entity_fields_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.entity_fields_insert;
		                GO
		                CREATE TRIGGER [dbo].[entity_fields_insert]
		                   ON  [dbo].[entity_fields]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('entity_fields',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('entity_fields_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.entity_fields_update;
		                GO
		                CREATE TRIGGER [dbo].[entity_fields_update]
		                   ON  [dbo].[entity_fields]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('entity_fields',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('entity_fields_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.entity_fields_delete;
		                GO
		                CREATE TRIGGER [dbo].[entity_fields_delete]
		                   ON  [dbo].[entity_fields]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('entity_fields',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('fieldset_fields_order_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.fieldset_fields_order_insert;
		                GO
		                CREATE TRIGGER [dbo].[fieldset_fields_order_insert]
		                   ON  [dbo].[fieldset_fields_order]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('fieldset_fields_order',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('fieldset_fields_order_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.fieldset_fields_order_update;
		                GO
		                CREATE TRIGGER [dbo].[fieldset_fields_order_update]
		                   ON  [dbo].[fieldset_fields_order]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('fieldset_fields_order',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('fieldset_fields_order_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.fieldset_fields_order_delete;
		                GO
		                CREATE TRIGGER [dbo].[fieldset_fields_order_delete]
		                   ON  [dbo].[fieldset_fields_order]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('fieldset_fields_order',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resort_zones_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resort_zones_insert;
		                GO
		                CREATE TRIGGER [dbo].[resort_zones_insert]
		                   ON  [dbo].[resort_zones]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resort_zones',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resort_zones_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resort_zones_update;
		                GO
		                CREATE TRIGGER [dbo].[resort_zones_update]
		                   ON  [dbo].[resort_zones]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resort_zones',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resort_zones_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resort_zones_delete;
		                GO
		                CREATE TRIGGER [dbo].[resort_zones_delete]
		                   ON  [dbo].[resort_zones]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resort_zones',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[news_categories_insert]
		                   ON  [dbo].[news_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[news_categories_update]
		                   ON  [dbo].[news_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[news_categories_delete]
		                   ON  [dbo].[news_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_files_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_files_insert;
		                GO
		                CREATE TRIGGER [dbo].[pages_files_insert]
		                   ON  [dbo].[pages_files]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages_files',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_files_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_files_update;
		                GO
		                CREATE TRIGGER [dbo].[pages_files_update]
		                   ON  [dbo].[pages_files]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages_files',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_files_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_files_delete;
		                GO
		                CREATE TRIGGER [dbo].[pages_files_delete]
		                   ON  [dbo].[pages_files]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages_files',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('dictionary_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.dictionary_insert;
		                GO
		                CREATE TRIGGER [dbo].[dictionary_insert]
		                   ON  [dbo].[dictionary]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('dictionary',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('dictionary_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.dictionary_update;
		                GO
		                CREATE TRIGGER [dbo].[dictionary_update]
		                   ON  [dbo].[dictionary]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('dictionary',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('dictionary_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.dictionary_delete;
		                GO
		                CREATE TRIGGER [dbo].[dictionary_delete]
		                   ON  [dbo].[dictionary]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('dictionary',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_insert;
		                GO
		                CREATE TRIGGER [dbo].[news_insert]
		                   ON  [dbo].[news]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_update;
		                GO
		                CREATE TRIGGER [dbo].[news_update]
		                   ON  [dbo].[news]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('news_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.news_delete;
		                GO
		                CREATE TRIGGER [dbo].[news_delete]
		                   ON  [dbo].[news]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('news',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('territories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.territories_insert;
		                GO
		                CREATE TRIGGER [dbo].[territories_insert]
		                   ON  [dbo].[territories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('territories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('territories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.territories_update;
		                GO
		                CREATE TRIGGER [dbo].[territories_update]
		                   ON  [dbo].[territories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('territories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('territories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.territories_delete;
		                GO
		                CREATE TRIGGER [dbo].[territories_delete]
		                   ON  [dbo].[territories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('territories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_sna_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_sna_insert;
		                GO
		                CREATE TRIGGER [dbo].[accounts_sna_insert]
		                   ON  [dbo].[accounts_sna]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts_sna',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_sna_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_sna_update;
		                GO
		                CREATE TRIGGER [dbo].[accounts_sna_update]
		                   ON  [dbo].[accounts_sna]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts_sna',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_sna_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_sna_delete;
		                GO
		                CREATE TRIGGER [dbo].[accounts_sna_delete]
		                   ON  [dbo].[accounts_sna]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts_sna',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('questions_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.questions_insert;
		                GO
		                CREATE TRIGGER [dbo].[questions_insert]
		                   ON  [dbo].[questions]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('questions',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('questions_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.questions_update;
		                GO
		                CREATE TRIGGER [dbo].[questions_update]
		                   ON  [dbo].[questions]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('questions',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('questions_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.questions_delete;
		                GO
		                CREATE TRIGGER [dbo].[questions_delete]
		                   ON  [dbo].[questions]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('questions',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_insert;
		                GO
		                CREATE TRIGGER [dbo].[accounts_insert]
		                   ON  [dbo].[accounts]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_update;
		                GO
		                CREATE TRIGGER [dbo].[accounts_update]
		                   ON  [dbo].[accounts]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('accounts_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.accounts_delete;
		                GO
		                CREATE TRIGGER [dbo].[accounts_delete]
		                   ON  [dbo].[accounts]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('accounts',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_insert;
		                GO
		                CREATE TRIGGER [dbo].[pages_insert]
		                   ON  [dbo].[pages]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_update;
		                GO
		                CREATE TRIGGER [dbo].[pages_update]
		                   ON  [dbo].[pages]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('pages_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.pages_delete;
		                GO
		                CREATE TRIGGER [dbo].[pages_delete]
		                   ON  [dbo].[pages]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('pages',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('seo_metadata_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.seo_metadata_insert;
		                GO
		                CREATE TRIGGER [dbo].[seo_metadata_insert]
		                   ON  [dbo].[seo_metadata]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('seo_metadata',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('seo_metadata_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.seo_metadata_update;
		                GO
		                CREATE TRIGGER [dbo].[seo_metadata_update]
		                   ON  [dbo].[seo_metadata]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('seo_metadata',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('seo_metadata_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.seo_metadata_delete;
		                GO
		                CREATE TRIGGER [dbo].[seo_metadata_delete]
		                   ON  [dbo].[seo_metadata]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('seo_metadata',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('fieldsets_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.fieldsets_insert;
		                GO
		                CREATE TRIGGER [dbo].[fieldsets_insert]
		                   ON  [dbo].[fieldsets]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('fieldsets',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('fieldsets_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.fieldsets_update;
		                GO
		                CREATE TRIGGER [dbo].[fieldsets_update]
		                   ON  [dbo].[fieldsets]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('fieldsets',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('fieldsets_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.fieldsets_delete;
		                GO
		                CREATE TRIGGER [dbo].[fieldsets_delete]
		                   ON  [dbo].[fieldsets]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('fieldsets',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('comments_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.comments_insert;
		                GO
		                CREATE TRIGGER [dbo].[comments_insert]
		                   ON  [dbo].[comments]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('comments',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('comments_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.comments_update;
		                GO
		                CREATE TRIGGER [dbo].[comments_update]
		                   ON  [dbo].[comments]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('comments',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('comments_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.comments_delete;
		                GO
		                CREATE TRIGGER [dbo].[comments_delete]
		                   ON  [dbo].[comments]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('comments',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('entity_photos_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.entity_photos_insert;
		                GO
		                CREATE TRIGGER [dbo].[entity_photos_insert]
		                   ON  [dbo].[entity_photos]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('entity_photos',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('entity_photos_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.entity_photos_update;
		                GO
		                CREATE TRIGGER [dbo].[entity_photos_update]
		                   ON  [dbo].[entity_photos]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('entity_photos',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('entity_photos_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.entity_photos_delete;
		                GO
		                CREATE TRIGGER [dbo].[entity_photos_delete]
		                   ON  [dbo].[entity_photos]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('entity_photos',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('field_values_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.field_values_insert;
		                GO
		                CREATE TRIGGER [dbo].[field_values_insert]
		                   ON  [dbo].[field_values]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('field_values',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('field_values_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.field_values_update;
		                GO
		                CREATE TRIGGER [dbo].[field_values_update]
		                   ON  [dbo].[field_values]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('field_values',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('field_values_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.field_values_delete;
		                GO
		                CREATE TRIGGER [dbo].[field_values_delete]
		                   ON  [dbo].[field_values]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('field_values',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('prices_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.prices_insert;
		                GO
		                CREATE TRIGGER [dbo].[prices_insert]
		                   ON  [dbo].[prices]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('prices',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('prices_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.prices_update;
		                GO
		                CREATE TRIGGER [dbo].[prices_update]
		                   ON  [dbo].[prices]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('prices',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('prices_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.prices_delete;
		                GO
		                CREATE TRIGGER [dbo].[prices_delete]
		                   ON  [dbo].[prices]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('prices',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('property_categories_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.property_categories_insert;
		                GO
		                CREATE TRIGGER [dbo].[property_categories_insert]
		                   ON  [dbo].[property_categories]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('property_categories',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('property_categories_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.property_categories_update;
		                GO
		                CREATE TRIGGER [dbo].[property_categories_update]
		                   ON  [dbo].[property_categories]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('property_categories',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('property_categories_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.property_categories_delete;
		                GO
		                CREATE TRIGGER [dbo].[property_categories_delete]
		                   ON  [dbo].[property_categories]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('property_categories',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('cure_profiles_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.cure_profiles_insert;
		                GO
		                CREATE TRIGGER [dbo].[cure_profiles_insert]
		                   ON  [dbo].[cure_profiles]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('cure_profiles',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('cure_profiles_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.cure_profiles_update;
		                GO
		                CREATE TRIGGER [dbo].[cure_profiles_update]
		                   ON  [dbo].[cure_profiles]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('cure_profiles',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('cure_profiles_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.cure_profiles_delete;
		                GO
		                CREATE TRIGGER [dbo].[cure_profiles_delete]
		                   ON  [dbo].[cure_profiles]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('cure_profiles',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('hotel_classes_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.hotel_classes_insert;
		                GO
		                CREATE TRIGGER [dbo].[hotel_classes_insert]
		                   ON  [dbo].[hotel_classes]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('hotel_classes',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('hotel_classes_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.hotel_classes_update;
		                GO
		                CREATE TRIGGER [dbo].[hotel_classes_update]
		                   ON  [dbo].[hotel_classes]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('hotel_classes',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('hotel_classes_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.hotel_classes_delete;
		                GO
		                CREATE TRIGGER [dbo].[hotel_classes_delete]
		                   ON  [dbo].[hotel_classes]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('hotel_classes',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('hotels_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.hotels_insert;
		                GO
		                CREATE TRIGGER [dbo].[hotels_insert]
		                   ON  [dbo].[hotels]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('hotels',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('hotels_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.hotels_update;
		                GO
		                CREATE TRIGGER [dbo].[hotels_update]
		                   ON  [dbo].[hotels]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('hotels',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('hotels_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.hotels_delete;
		                GO
		                CREATE TRIGGER [dbo].[hotels_delete]
		                   ON  [dbo].[hotels]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('hotels',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resorts_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resorts_insert;
		                GO
		                CREATE TRIGGER [dbo].[resorts_insert]
		                   ON  [dbo].[resorts]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resorts',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resorts_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resorts_update;
		                GO
		                CREATE TRIGGER [dbo].[resorts_update]
		                   ON  [dbo].[resorts]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resorts',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('resorts_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.resorts_delete;
		                GO
		                CREATE TRIGGER [dbo].[resorts_delete]
		                   ON  [dbo].[resorts]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('resorts',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('health_factors_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.health_factors_insert;
		                GO
		                CREATE TRIGGER [dbo].[health_factors_insert]
		                   ON  [dbo].[health_factors]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('health_factors',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('health_factors_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.health_factors_update;
		                GO
		                CREATE TRIGGER [dbo].[health_factors_update]
		                   ON  [dbo].[health_factors]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('health_factors',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('health_factors_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.health_factors_delete;
		                GO
		                CREATE TRIGGER [dbo].[health_factors_delete]
		                   ON  [dbo].[health_factors]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('health_factors',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('treatment_options_insert', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.treatment_options_insert;
		                GO
		                CREATE TRIGGER [dbo].[treatment_options_insert]
		                   ON  [dbo].[treatment_options]
		                   AFTER INSERT
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('treatment_options',
					                @curId, 0, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('treatment_options_update', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.treatment_options_update;
		                GO
		                CREATE TRIGGER [dbo].[treatment_options_update]
		                   ON  [dbo].[treatment_options]
		                   AFTER UPDATE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Inserted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('treatment_options',
					                @curId, 1, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		                GO
		                IF OBJECT_ID ('treatment_options_delete', 'TR') IS NOT NULL
		                   DROP TRIGGER dbo.treatment_options_delete;
		                GO
		                CREATE TRIGGER [dbo].[treatment_options_delete]
		                   ON  [dbo].[treatment_options]
		                   AFTER DELETE
		                AS 
		                BEGIN
		                    SET NOCOUNT ON;
		                    DECLARE InsertCursor CURSOR FOR SELECT id FROM Deleted
		                    DECLARE @curId bigint
		                    OPEN InsertCursor
		                    FETCH NEXT FROM InsertCursor INTO @curId
		                    WHILE @@FETCH_STATUS = 0
		                    BEGIN
				                INSERT INTO [dbo].meridian_updates(proto, proto_id, 
					                [action], dt, instance) VALUES('treatment_options',
					                @curId, 2, GETDATE(), SYSTEM_USER)
		                        FETCH NEXT FROM InsertCursor INTO @curId
		                    END
		                    CLOSE InsertCursor
		                    DEALLOCATE InsertCursor
		                END
		                GO
		*/
		public string ConnectionString {get; set;}
		public protoStore.changelogStore changelogStore {get; set;}
		public protoStore.citationsStore citationsStore {get; set;}
		public protoStore.propertiesStore propertiesStore {get; set;}
		public protoStore.gendersStore gendersStore {get; set;}
		public protoStore.deseasesStore deseasesStore {get; set;}
		public protoStore.territory_categoriesStore territory_categoriesStore {get; set;}
		public protoStore.countriesStore countriesStore {get; set;}
		public protoStore.regionsStore regionsStore {get; set;}
		public protoStore.entity_fieldsStore entity_fieldsStore {get; set;}
		public protoStore.fieldset_fields_orderStore fieldset_fields_orderStore {get; set;}
		public protoStore.resort_zonesStore resort_zonesStore {get; set;}
		public protoStore.news_categoriesStore news_categoriesStore {get; set;}
		public protoStore.pages_filesStore pages_filesStore {get; set;}
		public protoStore.dictionaryStore dictionaryStore {get; set;}
		public protoStore.newsStore newsStore {get; set;}
		public protoStore.territoriesStore territoriesStore {get; set;}
		public protoStore.accounts_snaStore accounts_snaStore {get; set;}
		public protoStore.questionsStore questionsStore {get; set;}
		public protoStore.accountsStore accountsStore {get; set;}
		public protoStore.pagesStore pagesStore {get; set;}
		public protoStore.seo_metadataStore seo_metadataStore {get; set;}
		public protoStore.fieldsetsStore fieldsetsStore {get; set;}
		public protoStore.commentsStore commentsStore {get; set;}
		public protoStore.entity_photosStore entity_photosStore {get; set;}
		public protoStore.field_valuesStore field_valuesStore {get; set;}
		public protoStore.pricesStore pricesStore {get; set;}
		public protoStore.property_categoriesStore property_categoriesStore {get; set;}
		public protoStore.cure_profilesStore cure_profilesStore {get; set;}
		public protoStore.hotel_classesStore hotel_classesStore {get; set;}
		public protoStore.hotelsStore hotelsStore {get; set;}
		public protoStore.resortsStore resortsStore {get; set;}
		public protoStore.health_factorsStore health_factorsStore {get; set;}
		public protoStore.treatment_optionsStore treatment_optionsStore {get; set;}
	}
}
