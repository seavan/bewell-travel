/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.proto
{
	[MetadataType(typeof(hotels_meta))]	public partial class hotels : admin.db.IDatabaseEntity
	{
		public hotels()
		{
			deseases_items = new List<deseases>();
			treatment_options_items = new List<treatment_options>();
			properties_items = new List<properties>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private int m_stars = 0;
		internal bool mc_stars { get; private set; }
		private long m_class_id = 0;
		internal bool mc_class_id { get; private set; }
		private string m_coordinates = "";
		internal bool mc_coordinates { get; private set; }
		private bool m_is_recomended_main_page = false;
		internal bool mc_is_recomended_main_page { get; private set; }
		private bool m_is_recomended = false;
		internal bool mc_is_recomended { get; private set; }
		private string m_deseases = "";
		internal bool mc_deseases { get; private set; }
		private string m_treatment_options = "";
		internal bool mc_treatment_options { get; private set; }
		private string m_properties = "";
		internal bool mc_properties { get; private set; }
		private long m_resort_id = 0;
		internal bool mc_resort_id { get; private set; }
		private bool m_noyayesgo = false;
		internal bool mc_noyayesgo { get; private set; }
		private bool m_is_published = false;
		internal bool mc_is_published { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_stars = _reader["stars"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("stars") : 0;
			mc_stars = false;
			m_class_id = _reader["class_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("class_id") : 0;
			mc_class_id = false;
			m_coordinates = _reader["coordinates"].GetType() != typeof(System.DBNull) ? _reader.GetString("coordinates") : "";
			mc_coordinates = false;
			m_is_recomended_main_page = _reader["is_recomended_main_page"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_recomended_main_page") : false;
			mc_is_recomended_main_page = false;
			m_is_recomended = _reader["is_recomended"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_recomended") : false;
			mc_is_recomended = false;
			m_deseases = _reader["deseases"].GetType() != typeof(System.DBNull) ? _reader.GetString("deseases") : "";
			mc_deseases = false;
			m_treatment_options = _reader["treatment_options"].GetType() != typeof(System.DBNull) ? _reader.GetString("treatment_options") : "";
			mc_treatment_options = false;
			m_properties = _reader["properties"].GetType() != typeof(System.DBNull) ? _reader.GetString("properties") : "";
			mc_properties = false;
			m_resort_id = _reader["resort_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("resort_id") : 0;
			mc_resort_id = false;
			m_noyayesgo = _reader["noyayesgo"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("noyayesgo") : false;
			mc_noyayesgo = false;
			m_is_published = _reader["is_published"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_published") : false;
			mc_is_published = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((resort_id > 0) && (_meridian.resortsStore.Exists(resort_id)))
			{
				this.resort_hotels_resorts = _meridian.resortsStore.Get(resort_id);;
				this.resort_hotels_resorts.AddHotels(this);
			}
			if((class_id > 0) && (_meridian.hotel_classesStore.Exists(class_id)))
			{
				this.class_hotels_hotel_classes = _meridian.hotel_classesStore.Get(class_id);;
				this.class_hotels_hotel_classes.AddHotels(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.resort_hotels_resorts != null)
			{
				this.resort_hotels_resorts.RemoveHotels(this);
			}
			if(this.class_hotels_hotel_classes != null)
			{
				this.class_hotels_hotel_classes.RemoveHotels(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
			keyIds = deseases.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.deseasesStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.deseasesStore.Get(foreignId);
						this.deseases_items.Add(foreignItem);
						foreignItem.deseases_items.Add(this);
					}
				}
			}
			keyIds = treatment_options.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.treatment_optionsStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.treatment_optionsStore.Get(foreignId);
						this.treatment_options_items.Add(foreignItem);
						foreignItem.treatment_options_items.Add(this);
					}
				}
			}
			keyIds = properties.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.propertiesStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.propertiesStore.Get(foreignId);
						this.properties_items.Add(foreignItem);
						foreignItem.properties_items.Add(this);
					}
				}
			}
		}
		public void SaveCompositions(Meridian _meridian)
		{
			deseases = string.Join(",", this.deseases_items.Select(s => s.id));
			treatment_options = string.Join(",", this.treatment_options_items.Select(s => s.id));
			properties = string.Join(",", this.properties_items.Select(s => s.id));
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
			keyIds = deseases.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.deseasesStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.deseasesStore.Get(foreignId);
						if(this.deseases_items.Contains(foreignItem)) this.deseases_items.Remove(foreignItem);
						if(foreignItem.deseases_items.Contains(this)) foreignItem.deseases_items.Remove(this);
					}
				}
			}
			keyIds = treatment_options.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.treatment_optionsStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.treatment_optionsStore.Get(foreignId);
						if(this.treatment_options_items.Contains(foreignItem)) this.treatment_options_items.Remove(foreignItem);
						if(foreignItem.treatment_options_items.Contains(this)) foreignItem.treatment_options_items.Remove(this);
					}
				}
			}
			keyIds = properties.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.propertiesStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.propertiesStore.Get(foreignId);
						if(this.properties_items.Contains(foreignItem)) this.properties_items.Remove(foreignItem);
						if(foreignItem.properties_items.Contains(this)) foreignItem.properties_items.Remove(this);
					}
				}
			}
		}
		public string ProtoName
		{
			get { return "hotels"; }
		}
		/* metafile template 
		internal class hotels_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public int stars { get; set; }
			public long class_id { get; set; }
			public string coordinates { get; set; }
			public bool is_recomended_main_page { get; set; }
			public bool is_recomended { get; set; }
			public string deseases { get; set; }
			public string treatment_options { get; set; }
			public string properties { get; set; }
			public long resort_id { get; set; }
			public bool noyayesgo { get; set; }
			public bool is_published { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public int stars
		{
			get
			{
				return m_stars;
			}
			set
			{
				if(m_stars != value)
				{
					m_stars = value != null ? value : 0;
					mc_stars = true;
					// call update worker thread;
				}
			}
		}
		public long class_id
		{
			get
			{
				return m_class_id;
			}
			set
			{
				if(m_class_id != value)
				{
					m_class_id = value != null ? value : 0;
					mc_class_id = true;
					// call update worker thread;
				}
			}
		}
		public string coordinates
		{
			get
			{
				return m_coordinates;
			}
			set
			{
				if(m_coordinates != value)
				{
					m_coordinates = value != null ? value : "";
					mc_coordinates = true;
					// call update worker thread;
				}
			}
		}
		public bool is_recomended_main_page
		{
			get
			{
				return m_is_recomended_main_page;
			}
			set
			{
				if(m_is_recomended_main_page != value)
				{
					m_is_recomended_main_page = value != null ? value : false;
					mc_is_recomended_main_page = true;
					// call update worker thread;
				}
			}
		}
		public bool is_recomended
		{
			get
			{
				return m_is_recomended;
			}
			set
			{
				if(m_is_recomended != value)
				{
					m_is_recomended = value != null ? value : false;
					mc_is_recomended = true;
					// call update worker thread;
				}
			}
		}
		public string deseases
		{
			get
			{
				return m_deseases;
			}
			set
			{
				if(m_deseases != value)
				{
					m_deseases = value != null ? value : "";
					mc_deseases = true;
					// call update worker thread;
				}
			}
		}
		public string treatment_options
		{
			get
			{
				return m_treatment_options;
			}
			set
			{
				if(m_treatment_options != value)
				{
					m_treatment_options = value != null ? value : "";
					mc_treatment_options = true;
					// call update worker thread;
				}
			}
		}
		public string properties
		{
			get
			{
				return m_properties;
			}
			set
			{
				if(m_properties != value)
				{
					m_properties = value != null ? value : "";
					mc_properties = true;
					// call update worker thread;
				}
			}
		}
		public long resort_id
		{
			get
			{
				return m_resort_id;
			}
			set
			{
				if(m_resort_id != value)
				{
					m_resort_id = value != null ? value : 0;
					mc_resort_id = true;
					// call update worker thread;
				}
			}
		}
		public bool noyayesgo
		{
			get
			{
				return m_noyayesgo;
			}
			set
			{
				if(m_noyayesgo != value)
				{
					m_noyayesgo = value != null ? value : false;
					mc_noyayesgo = true;
					// call update worker thread;
				}
			}
		}
		public bool is_published
		{
			get
			{
				return m_is_published;
			}
			set
			{
				if(m_is_published != value)
				{
					m_is_published = value != null ? value : false;
					mc_is_published = true;
					// call update worker thread;
				}
			}
		}
		private resorts resort_hotels_resorts
		{
			get; set; 
		}
		public resorts GetHotelsResort()
		{
			return resort_hotels_resorts ;
		}
		private hotel_classes class_hotels_hotel_classes
		{
			get; set; 
		}
		public hotel_classes GetHotelsHotel_classe()
		{
			return class_hotels_hotel_classes ;
		}
		[ScriptIgnore]
		[ScaffoldColumn(false)]
		public List<deseases> deseases_items
		{
			get; set; 
		}
		public void add_deseases_item(long id)
		{
			if (Meridian.Default.deseasesStore.Exists(id))
			{
				if (!deseases_items.Any(s => s.id.Equals(id)))
				{
					deseases_items.Add(Meridian.Default.deseasesStore.Get(id));
					SaveCompositions(Meridian.Default);
				}
			}
		}
		public void remove_deseases_item(long id)
		{
			if (deseases_items.Any(s => s.id.Equals(id)))
			{
				deseases_items.Remove(deseases_items.Single(s => s.id.Equals(id)));;
				SaveCompositions(Meridian.Default);
			}
		}
		[ScriptIgnore]
		[ScaffoldColumn(false)]
		public List<treatment_options> treatment_options_items
		{
			get; set; 
		}
		public void add_treatment_options_item(long id)
		{
			if (Meridian.Default.treatment_optionsStore.Exists(id))
			{
				if (!treatment_options_items.Any(s => s.id.Equals(id)))
				{
					treatment_options_items.Add(Meridian.Default.treatment_optionsStore.Get(id));
					SaveCompositions(Meridian.Default);
				}
			}
		}
		public void remove_treatment_options_item(long id)
		{
			if (treatment_options_items.Any(s => s.id.Equals(id)))
			{
				treatment_options_items.Remove(treatment_options_items.Single(s => s.id.Equals(id)));;
				SaveCompositions(Meridian.Default);
			}
		}
		[ScriptIgnore]
		[ScaffoldColumn(false)]
		public List<properties> properties_items
		{
			get; set; 
		}
		public void add_properties_item(long id)
		{
			if (Meridian.Default.propertiesStore.Exists(id))
			{
				if (!properties_items.Any(s => s.id.Equals(id)))
				{
					properties_items.Add(Meridian.Default.propertiesStore.Get(id));
					SaveCompositions(Meridian.Default);
				}
			}
		}
		public void remove_properties_item(long id)
		{
			if (properties_items.Any(s => s.id.Equals(id)))
			{
				properties_items.Remove(properties_items.Single(s => s.id.Equals(id)));;
				SaveCompositions(Meridian.Default);
			}
		}
	}
}
