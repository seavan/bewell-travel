/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.proto
{
	[MetadataType(typeof(resorts_meta))]	public partial class resorts : admin.db.IDatabaseEntity
	{
		public resorts()
		{
			resort_hotels = new List<hotels>();
			cure_profiles_items = new List<cure_profiles>();
			ad_cure_profiles_items = new List<cure_profiles>();
			health_factors_items = new List<health_factors>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private long m_territory_id = 0;
		internal bool mc_territory_id { get; private set; }
		private string m_cure_profiles = "";
		internal bool mc_cure_profiles { get; private set; }
		private string m_ad_cure_profiles = "";
		internal bool mc_ad_cure_profiles { get; private set; }
		private string m_health_factors = "";
		internal bool mc_health_factors { get; private set; }
		private bool m_is_recomended = false;
		internal bool mc_is_recomended { get; private set; }
		private string m_coordinates = "";
		internal bool mc_coordinates { get; private set; }
		private bool m_noyayesgo = false;
		internal bool mc_noyayesgo { get; private set; }
		private bool m_is_published = false;
		internal bool mc_is_published { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_territory_id = _reader["territory_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("territory_id") : 0;
			mc_territory_id = false;
			m_cure_profiles = _reader["cure_profiles"].GetType() != typeof(System.DBNull) ? _reader.GetString("cure_profiles") : "";
			mc_cure_profiles = false;
			m_ad_cure_profiles = _reader["ad_cure_profiles"].GetType() != typeof(System.DBNull) ? _reader.GetString("ad_cure_profiles") : "";
			mc_ad_cure_profiles = false;
			m_health_factors = _reader["health_factors"].GetType() != typeof(System.DBNull) ? _reader.GetString("health_factors") : "";
			mc_health_factors = false;
			m_is_recomended = _reader["is_recomended"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_recomended") : false;
			mc_is_recomended = false;
			m_coordinates = _reader["coordinates"].GetType() != typeof(System.DBNull) ? _reader.GetString("coordinates") : "";
			mc_coordinates = false;
			m_noyayesgo = _reader["noyayesgo"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("noyayesgo") : false;
			mc_noyayesgo = false;
			m_is_published = _reader["is_published"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("is_published") : false;
			mc_is_published = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((territory_id > 0) && (_meridian.territoriesStore.Exists(territory_id)))
			{
				this.territory_resorts_territories = _meridian.territoriesStore.Get(territory_id);;
				this.territory_resorts_territories.AddResorts(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.territory_resorts_territories != null)
			{
				this.territory_resorts_territories.RemoveResorts(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
			keyIds = cure_profiles.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.cure_profilesStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.cure_profilesStore.Get(foreignId);
						this.cure_profiles_items.Add(foreignItem);
						foreignItem.cure_profiles_items.Add(this);
					}
				}
			}
			keyIds = ad_cure_profiles.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.cure_profilesStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.cure_profilesStore.Get(foreignId);
						this.ad_cure_profiles_items.Add(foreignItem);
						foreignItem.ad_cure_profiles_items.Add(this);
					}
				}
			}
			keyIds = health_factors.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.health_factorsStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.health_factorsStore.Get(foreignId);
						this.health_factors_items.Add(foreignItem);
						foreignItem.health_factors_items.Add(this);
					}
				}
			}
		}
		public void SaveCompositions(Meridian _meridian)
		{
			cure_profiles = string.Join(",", this.cure_profiles_items.Select(s => s.id));
			ad_cure_profiles = string.Join(",", this.ad_cure_profiles_items.Select(s => s.id));
			health_factors = string.Join(",", this.health_factors_items.Select(s => s.id));
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
			keyIds = cure_profiles.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.cure_profilesStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.cure_profilesStore.Get(foreignId);
						if(this.cure_profiles_items.Contains(foreignItem)) this.cure_profiles_items.Remove(foreignItem);
						if(foreignItem.cure_profiles_items.Contains(this)) foreignItem.cure_profiles_items.Remove(this);
					}
				}
			}
			keyIds = ad_cure_profiles.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.cure_profilesStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.cure_profilesStore.Get(foreignId);
						if(this.ad_cure_profiles_items.Contains(foreignItem)) this.ad_cure_profiles_items.Remove(foreignItem);
						if(foreignItem.ad_cure_profiles_items.Contains(this)) foreignItem.ad_cure_profiles_items.Remove(this);
					}
				}
			}
			keyIds = health_factors.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.health_factorsStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.health_factorsStore.Get(foreignId);
						if(this.health_factors_items.Contains(foreignItem)) this.health_factors_items.Remove(foreignItem);
						if(foreignItem.health_factors_items.Contains(this)) foreignItem.health_factors_items.Remove(this);
					}
				}
			}
		}
		public string ProtoName
		{
			get { return "resorts"; }
		}
		/* metafile template 
		internal class resorts_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public long territory_id { get; set; }
			public string cure_profiles { get; set; }
			public string ad_cure_profiles { get; set; }
			public string health_factors { get; set; }
			public bool is_recomended { get; set; }
			public string coordinates { get; set; }
			public bool noyayesgo { get; set; }
			public bool is_published { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public long territory_id
		{
			get
			{
				return m_territory_id;
			}
			set
			{
				if(m_territory_id != value)
				{
					m_territory_id = value != null ? value : 0;
					mc_territory_id = true;
					// call update worker thread;
				}
			}
		}
		public string cure_profiles
		{
			get
			{
				return m_cure_profiles;
			}
			set
			{
				if(m_cure_profiles != value)
				{
					m_cure_profiles = value != null ? value : "";
					mc_cure_profiles = true;
					// call update worker thread;
				}
			}
		}
		public string ad_cure_profiles
		{
			get
			{
				return m_ad_cure_profiles;
			}
			set
			{
				if(m_ad_cure_profiles != value)
				{
					m_ad_cure_profiles = value != null ? value : "";
					mc_ad_cure_profiles = true;
					// call update worker thread;
				}
			}
		}
		public string health_factors
		{
			get
			{
				return m_health_factors;
			}
			set
			{
				if(m_health_factors != value)
				{
					m_health_factors = value != null ? value : "";
					mc_health_factors = true;
					// call update worker thread;
				}
			}
		}
		public bool is_recomended
		{
			get
			{
				return m_is_recomended;
			}
			set
			{
				if(m_is_recomended != value)
				{
					m_is_recomended = value != null ? value : false;
					mc_is_recomended = true;
					// call update worker thread;
				}
			}
		}
		public string coordinates
		{
			get
			{
				return m_coordinates;
			}
			set
			{
				if(m_coordinates != value)
				{
					m_coordinates = value != null ? value : "";
					mc_coordinates = true;
					// call update worker thread;
				}
			}
		}
		public bool noyayesgo
		{
			get
			{
				return m_noyayesgo;
			}
			set
			{
				if(m_noyayesgo != value)
				{
					m_noyayesgo = value != null ? value : false;
					mc_noyayesgo = true;
					// call update worker thread;
				}
			}
		}
		public bool is_published
		{
			get
			{
				return m_is_published;
			}
			set
			{
				if(m_is_published != value)
				{
					m_is_published = value != null ? value : false;
					mc_is_published = true;
					// call update worker thread;
				}
			}
		}
		private List<hotels> resort_hotels
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<hotels> Hotels
		{
			get { return resort_hotels; }
		}
		public IEnumerable<hotels> GetHotels()
		{
			return resort_hotels;
		}
		public hotels AddHotels(hotels _item, bool _insertToStore = false)
		{
			if(resort_hotels.IndexOf(_item) != -1) return _item;
			resort_hotels.Add(_item);
			_item.resort_id = id;
			if(_insertToStore && !Meridian.Default.hotelsStore.Exists(_item.id))
			{
				Meridian.Default.hotelsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public hotels RemoveHotels(hotels _item, bool _complete = false)
		{
			resort_hotels.Remove(_item);
			if(_complete) Meridian.Default.hotelsStore.Delete(_item);
			return _item;
		}
		private territories territory_resorts_territories
		{
			get; set; 
		}
		public territories GetResortsTerritorie()
		{
			return territory_resorts_territories ;
		}
		[ScriptIgnore]
		[ScaffoldColumn(false)]
		public List<cure_profiles> cure_profiles_items
		{
			get; set; 
		}
		public void add_cure_profiles_item(long id)
		{
			if (Meridian.Default.cure_profilesStore.Exists(id))
			{
				if (!cure_profiles_items.Any(s => s.id.Equals(id)))
				{
					cure_profiles_items.Add(Meridian.Default.cure_profilesStore.Get(id));
					SaveCompositions(Meridian.Default);
				}
			}
		}
		public void remove_cure_profiles_item(long id)
		{
			if (cure_profiles_items.Any(s => s.id.Equals(id)))
			{
				cure_profiles_items.Remove(cure_profiles_items.Single(s => s.id.Equals(id)));;
				SaveCompositions(Meridian.Default);
			}
		}
		[ScriptIgnore]
		[ScaffoldColumn(false)]
		public List<cure_profiles> ad_cure_profiles_items
		{
			get; set; 
		}
		public void add_cure_profiles_ad_item(long id)
		{
			if (Meridian.Default.cure_profilesStore.Exists(id))
			{
				if (!ad_cure_profiles_items.Any(s => s.id.Equals(id)))
				{
					ad_cure_profiles_items.Add(Meridian.Default.cure_profilesStore.Get(id));
					SaveCompositions(Meridian.Default);
				}
			}
		}
		public void remove_cure_profiles_ad_item(long id)
		{
			if (ad_cure_profiles_items.Any(s => s.id.Equals(id)))
			{
				ad_cure_profiles_items.Remove(ad_cure_profiles_items.Single(s => s.id.Equals(id)));;
				SaveCompositions(Meridian.Default);
			}
		}
		[ScriptIgnore]
		[ScaffoldColumn(false)]
		public List<health_factors> health_factors_items
		{
			get; set; 
		}
		public void add_health_factors_item(long id)
		{
			if (Meridian.Default.health_factorsStore.Exists(id))
			{
				if (!health_factors_items.Any(s => s.id.Equals(id)))
				{
					health_factors_items.Add(Meridian.Default.health_factorsStore.Get(id));
					SaveCompositions(Meridian.Default);
				}
			}
		}
		public void remove_health_factors_item(long id)
		{
			if (health_factors_items.Any(s => s.id.Equals(id)))
			{
				health_factors_items.Remove(health_factors_items.Single(s => s.id.Equals(id)));;
				SaveCompositions(Meridian.Default);
			}
		}
	}
}
