/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.proto
{
	[MetadataType(typeof(accounts_meta))]	public partial class accounts : admin.db.IDatabaseEntity
	{
		public accounts()
		{
			u_comments = new List<comments>();
			account_questions = new List<questions>();
			account_answers = new List<questions>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_email = "";
		internal bool mc_email { get; private set; }
		private string m_firstname = "";
		internal bool mc_firstname { get; private set; }
		private string m_lastname = "";
		internal bool mc_lastname { get; private set; }
		private string m_secondname = "";
		internal bool mc_secondname { get; private set; }
		private long m_role_id = 0;
		internal bool mc_role_id { get; private set; }
		private string m_post = "";
		internal bool mc_post { get; private set; }
		private DateTime m_created = DateTime.MinValue;
		internal bool mc_created { get; private set; }
		private string m_password = "";
		internal bool mc_password { get; private set; }
		private System.Guid m_salt = new System.Guid();
		internal bool mc_salt { get; private set; }
		private System.Guid m_activation_guid = new System.Guid();
		internal bool mc_activation_guid { get; private set; }
		private DateTime m_lastlogin = DateTime.MinValue;
		internal bool mc_lastlogin { get; private set; }
		private System.Guid m_rememberpass_guid = new System.Guid();
		internal bool mc_rememberpass_guid { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_email = _reader["email"].GetType() != typeof(System.DBNull) ? _reader.GetString("email") : "";
			mc_email = false;
			m_firstname = _reader["firstname"].GetType() != typeof(System.DBNull) ? _reader.GetString("firstname") : "";
			mc_firstname = false;
			m_lastname = _reader["lastname"].GetType() != typeof(System.DBNull) ? _reader.GetString("lastname") : "";
			mc_lastname = false;
			m_secondname = _reader["secondname"].GetType() != typeof(System.DBNull) ? _reader.GetString("secondname") : "";
			mc_secondname = false;
			m_role_id = _reader["role_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("role_id") : 0;
			mc_role_id = false;
			m_post = _reader["post"].GetType() != typeof(System.DBNull) ? _reader.GetString("post") : "";
			mc_post = false;
			m_created = _reader["created"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("created") : DateTime.MinValue;
			mc_created = false;
			m_password = _reader["password"].GetType() != typeof(System.DBNull) ? _reader.GetString("password") : "";
			mc_password = false;
			m_salt = _reader["salt"].GetType() != typeof(System.DBNull) ? !String.IsNullOrEmpty(_reader["salt"].ToString()) ? _reader.GetGuid("salt") : new System.Guid() : new System.Guid();
			mc_salt = false;
			m_activation_guid = _reader["activation_guid"].GetType() != typeof(System.DBNull) ? !String.IsNullOrEmpty(_reader["activation_guid"].ToString()) ? _reader.GetGuid("activation_guid") : new System.Guid() : new System.Guid();
			mc_activation_guid = false;
			m_lastlogin = _reader["lastlogin"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("lastlogin") : DateTime.MinValue;
			mc_lastlogin = false;
			m_rememberpass_guid = _reader["rememberpass_guid"].GetType() != typeof(System.DBNull) ? !String.IsNullOrEmpty(_reader["rememberpass_guid"].ToString()) ? _reader.GetGuid("rememberpass_guid") : new System.Guid() : new System.Guid();
			mc_rememberpass_guid = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
		}
		public void DeleteAggregations()
		{
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "accounts"; }
		}
		/* metafile template 
		internal class accounts_meta
		{
			public long id { get; set; }
			public string email { get; set; }
			public string firstname { get; set; }
			public string lastname { get; set; }
			public string secondname { get; set; }
			public long role_id { get; set; }
			public string post { get; set; }
			public DateTime created { get; set; }
			public string password { get; set; }
			public System.Guid salt { get; set; }
			public System.Guid activation_guid { get; set; }
			public DateTime lastlogin { get; set; }
			public System.Guid rememberpass_guid { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string email
		{
			get
			{
				return m_email;
			}
			set
			{
				if(m_email != value)
				{
					m_email = value != null ? value : "";
					mc_email = true;
					// call update worker thread;
				}
			}
		}
		public string firstname
		{
			get
			{
				return m_firstname;
			}
			set
			{
				if(m_firstname != value)
				{
					m_firstname = value != null ? value : "";
					mc_firstname = true;
					// call update worker thread;
				}
			}
		}
		public string lastname
		{
			get
			{
				return m_lastname;
			}
			set
			{
				if(m_lastname != value)
				{
					m_lastname = value != null ? value : "";
					mc_lastname = true;
					// call update worker thread;
				}
			}
		}
		public string secondname
		{
			get
			{
				return m_secondname;
			}
			set
			{
				if(m_secondname != value)
				{
					m_secondname = value != null ? value : "";
					mc_secondname = true;
					// call update worker thread;
				}
			}
		}
		public long role_id
		{
			get
			{
				return m_role_id;
			}
			set
			{
				if(m_role_id != value)
				{
					m_role_id = value != null ? value : 0;
					mc_role_id = true;
					// call update worker thread;
				}
			}
		}
		public string post
		{
			get
			{
				return m_post;
			}
			set
			{
				if(m_post != value)
				{
					m_post = value != null ? value : "";
					mc_post = true;
					// call update worker thread;
				}
			}
		}
		public DateTime created
		{
			get
			{
				return m_created;
			}
			set
			{
				if(m_created != value)
				{
					m_created = value != null ? value : DateTime.MinValue;
					if(m_created.Year < 1800) m_created = DateTime.MinValue;
					mc_created = true;
					// call update worker thread;
				}
			}
		}
		public string password
		{
			get
			{
				return m_password;
			}
			set
			{
				if(m_password != value)
				{
					m_password = value != null ? value : "";
					mc_password = true;
					// call update worker thread;
				}
			}
		}
		public System.Guid salt
		{
			get
			{
				return m_salt;
			}
			set
			{
				if(m_salt != value)
				{
					m_salt = value != null ? value : new System.Guid();
					mc_salt = true;
					// call update worker thread;
				}
			}
		}
		public System.Guid activation_guid
		{
			get
			{
				return m_activation_guid;
			}
			set
			{
				if(m_activation_guid != value)
				{
					m_activation_guid = value != null ? value : new System.Guid();
					mc_activation_guid = true;
					// call update worker thread;
				}
			}
		}
		public DateTime lastlogin
		{
			get
			{
				return m_lastlogin;
			}
			set
			{
				if(m_lastlogin != value)
				{
					m_lastlogin = value != null ? value : DateTime.MinValue;
					if(m_lastlogin.Year < 1800) m_lastlogin = DateTime.MinValue;
					mc_lastlogin = true;
					// call update worker thread;
				}
			}
		}
		public System.Guid rememberpass_guid
		{
			get
			{
				return m_rememberpass_guid;
			}
			set
			{
				if(m_rememberpass_guid != value)
				{
					m_rememberpass_guid = value != null ? value : new System.Guid();
					mc_rememberpass_guid = true;
					// call update worker thread;
				}
			}
		}
		private List<comments> u_comments
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<comments> Comments
		{
			get { return u_comments; }
		}
		public IEnumerable<comments> GetComments()
		{
			return u_comments;
		}
		public comments AddComments(comments _item, bool _insertToStore = false)
		{
			if(u_comments.IndexOf(_item) != -1) return _item;
			u_comments.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.commentsStore.Exists(_item.id))
			{
				Meridian.Default.commentsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public comments RemoveComments(comments _item, bool _complete = false)
		{
			u_comments.Remove(_item);
			if(_complete) Meridian.Default.commentsStore.Delete(_item);
			return _item;
		}
		private List<questions> account_questions
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<questions> Questions
		{
			get { return account_questions; }
		}
		public IEnumerable<questions> GetQuestions()
		{
			return account_questions;
		}
		public questions AddQuestions(questions _item, bool _insertToStore = false)
		{
			if(account_questions.IndexOf(_item) != -1) return _item;
			account_questions.Add(_item);
			_item.account_id = id;
			if(_insertToStore && !Meridian.Default.questionsStore.Exists(_item.id))
			{
				Meridian.Default.questionsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public questions RemoveQuestions(questions _item, bool _complete = false)
		{
			account_questions.Remove(_item);
			if(_complete) Meridian.Default.questionsStore.Delete(_item);
			return _item;
		}
		private List<questions> account_answers
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<questions> Answers
		{
			get { return account_answers; }
		}
		public IEnumerable<questions> GetAnswers()
		{
			return account_answers;
		}
		public questions AddAnswers(questions _item, bool _insertToStore = false)
		{
			if(account_answers.IndexOf(_item) != -1) return _item;
			account_answers.Add(_item);
			_item.replier_account_id = id;
			if(_insertToStore && !Meridian.Default.questionsStore.Exists(_item.id))
			{
				Meridian.Default.questionsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public questions RemoveAnswers(questions _item, bool _complete = false)
		{
			account_answers.Remove(_item);
			if(_complete) Meridian.Default.questionsStore.Delete(_item);
			return _item;
		}
	}
}
