/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.proto
{
	[MetadataType(typeof(questions_meta))]	public partial class questions : admin.db.IDatabaseEntity
	{
		public questions()
		{
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private long m_account_id = 0;
		internal bool mc_account_id { get; private set; }
		private DateTime m_ask_date = DateTime.MinValue;
		internal bool mc_ask_date { get; private set; }
		private string m_asking_user_name = "";
		internal bool mc_asking_user_name { get; private set; }
		private string m_asking_user_email = "";
		internal bool mc_asking_user_email { get; private set; }
		private string m_question = "";
		internal bool mc_question { get; private set; }
		private long m_replier_account_id = 0;
		internal bool mc_replier_account_id { get; private set; }
		private string m_reply_text = "";
		internal bool mc_reply_text { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_account_id = _reader["account_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("account_id") : 0;
			mc_account_id = false;
			m_ask_date = _reader["ask_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("ask_date") : DateTime.MinValue;
			mc_ask_date = false;
			m_asking_user_name = _reader["asking_user_name"].GetType() != typeof(System.DBNull) ? _reader.GetString("asking_user_name") : "";
			mc_asking_user_name = false;
			m_asking_user_email = _reader["asking_user_email"].GetType() != typeof(System.DBNull) ? _reader.GetString("asking_user_email") : "";
			mc_asking_user_email = false;
			m_question = _reader["question"].GetType() != typeof(System.DBNull) ? _reader.GetString("question") : "";
			mc_question = false;
			m_replier_account_id = _reader["replier_account_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("replier_account_id") : 0;
			mc_replier_account_id = false;
			m_reply_text = _reader["reply_text"].GetType() != typeof(System.DBNull) ? _reader.GetString("reply_text") : "";
			mc_reply_text = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((account_id > 0) && (_meridian.accountsStore.Exists(account_id)))
			{
				this.account_questions_accounts = _meridian.accountsStore.Get(account_id);;
				this.account_questions_accounts.AddQuestions(this);
			}
			if((replier_account_id > 0) && (_meridian.accountsStore.Exists(replier_account_id)))
			{
				this.account_answers_accounts = _meridian.accountsStore.Get(replier_account_id);;
				this.account_answers_accounts.AddAnswers(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.account_questions_accounts != null)
			{
				this.account_questions_accounts.RemoveQuestions(this);
			}
			if(this.account_answers_accounts != null)
			{
				this.account_answers_accounts.RemoveAnswers(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "questions"; }
		}
		/* metafile template 
		internal class questions_meta
		{
			public long id { get; set; }
			public long account_id { get; set; }
			public DateTime ask_date { get; set; }
			public string asking_user_name { get; set; }
			public string asking_user_email { get; set; }
			public string question { get; set; }
			public long replier_account_id { get; set; }
			public string reply_text { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public long account_id
		{
			get
			{
				return m_account_id;
			}
			set
			{
				if(m_account_id != value)
				{
					m_account_id = value != null ? value : 0;
					mc_account_id = true;
					// call update worker thread;
				}
			}
		}
		public DateTime ask_date
		{
			get
			{
				return m_ask_date;
			}
			set
			{
				if(m_ask_date != value)
				{
					m_ask_date = value != null ? value : DateTime.MinValue;
					if(m_ask_date.Year < 1800) m_ask_date = DateTime.MinValue;
					mc_ask_date = true;
					// call update worker thread;
				}
			}
		}
		public string asking_user_name
		{
			get
			{
				return m_asking_user_name;
			}
			set
			{
				if(m_asking_user_name != value)
				{
					m_asking_user_name = value != null ? value : "";
					mc_asking_user_name = true;
					// call update worker thread;
				}
			}
		}
		public string asking_user_email
		{
			get
			{
				return m_asking_user_email;
			}
			set
			{
				if(m_asking_user_email != value)
				{
					m_asking_user_email = value != null ? value : "";
					mc_asking_user_email = true;
					// call update worker thread;
				}
			}
		}
		public string question
		{
			get
			{
				return m_question;
			}
			set
			{
				if(m_question != value)
				{
					m_question = value != null ? value : "";
					mc_question = true;
					// call update worker thread;
				}
			}
		}
		public long replier_account_id
		{
			get
			{
				return m_replier_account_id;
			}
			set
			{
				if(m_replier_account_id != value)
				{
					m_replier_account_id = value != null ? value : 0;
					mc_replier_account_id = true;
					// call update worker thread;
				}
			}
		}
		public string reply_text
		{
			get
			{
				return m_reply_text;
			}
			set
			{
				if(m_reply_text != value)
				{
					m_reply_text = value != null ? value : "";
					mc_reply_text = true;
					// call update worker thread;
				}
			}
		}
		private accounts account_questions_accounts
		{
			get; set; 
		}
		public accounts GetQuestionsAccount()
		{
			return account_questions_accounts ;
		}
		private accounts account_answers_accounts
		{
			get; set; 
		}
		public accounts GetAnswersAccount()
		{
			return account_answers_accounts ;
		}
	}
}
