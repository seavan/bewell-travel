/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.proto
{
	[MetadataType(typeof(entity_fields_meta))]	public partial class entity_fields : admin.db.IDatabaseEntity
	{
		public entity_fields()
		{
			fv_entity_fields = new List<field_values>();
			fieldsets_items = new List<fieldsets>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private string m_fieldsets = "";
		internal bool mc_fieldsets { get; private set; }
		private int m_announce_order = 0;
		internal bool mc_announce_order { get; private set; }
		private bool m_show_in_announce = false;
		internal bool mc_show_in_announce { get; private set; }
		private string m_controller = "";
		internal bool mc_controller { get; private set; }
		private string m_action = "";
		internal bool mc_action { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_fieldsets = _reader["fieldsets"].GetType() != typeof(System.DBNull) ? _reader.GetString("fieldsets") : "";
			mc_fieldsets = false;
			m_announce_order = _reader["announce_order"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("announce_order") : 0;
			mc_announce_order = false;
			m_show_in_announce = _reader["show_in_announce"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("show_in_announce") : false;
			mc_show_in_announce = false;
			m_controller = _reader["controller"].GetType() != typeof(System.DBNull) ? _reader.GetString("controller") : "";
			mc_controller = false;
			m_action = _reader["action"].GetType() != typeof(System.DBNull) ? _reader.GetString("action") : "";
			mc_action = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
		}
		public void DeleteAggregations()
		{
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
			keyIds = fieldsets.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.fieldsetsStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.fieldsetsStore.Get(foreignId);
						this.fieldsets_items.Add(foreignItem);
						foreignItem.fieldsets_items.Add(this);
					}
				}
			}
		}
		public void SaveCompositions(Meridian _meridian)
		{
			fieldsets = string.Join(",", this.fieldsets_items.Select(s => s.id));
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
			keyIds = fieldsets.Split(',');
			foreach(var foreignIdStr in keyIds)
			{
				long foreignId = 0;
				if(long.TryParse(foreignIdStr, out foreignId))
				{
					if((foreignId > 0) && (_meridian.fieldsetsStore.Exists(foreignId)))
					{
						var foreignItem = _meridian.fieldsetsStore.Get(foreignId);
						if(this.fieldsets_items.Contains(foreignItem)) this.fieldsets_items.Remove(foreignItem);
						if(foreignItem.fieldsets_items.Contains(this)) foreignItem.fieldsets_items.Remove(this);
					}
				}
			}
		}
		public string ProtoName
		{
			get { return "entity_fields"; }
		}
		/* metafile template 
		internal class entity_fields_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public string fieldsets { get; set; }
			public int announce_order { get; set; }
			public bool show_in_announce { get; set; }
			public string controller { get; set; }
			public string action { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public string fieldsets
		{
			get
			{
				return m_fieldsets;
			}
			set
			{
				if(m_fieldsets != value)
				{
					m_fieldsets = value != null ? value : "";
					mc_fieldsets = true;
					// call update worker thread;
				}
			}
		}
		public int announce_order
		{
			get
			{
				return m_announce_order;
			}
			set
			{
				if(m_announce_order != value)
				{
					m_announce_order = value != null ? value : 0;
					mc_announce_order = true;
					// call update worker thread;
				}
			}
		}
		public bool show_in_announce
		{
			get
			{
				return m_show_in_announce;
			}
			set
			{
				if(m_show_in_announce != value)
				{
					m_show_in_announce = value != null ? value : false;
					mc_show_in_announce = true;
					// call update worker thread;
				}
			}
		}
		public string controller
		{
			get
			{
				return m_controller;
			}
			set
			{
				if(m_controller != value)
				{
					m_controller = value != null ? value : "";
					mc_controller = true;
					// call update worker thread;
				}
			}
		}
		public string action
		{
			get
			{
				return m_action;
			}
			set
			{
				if(m_action != value)
				{
					m_action = value != null ? value : "";
					mc_action = true;
					// call update worker thread;
				}
			}
		}
		private List<field_values> fv_entity_fields
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<field_values> FieldValues
		{
			get { return fv_entity_fields; }
		}
		public IEnumerable<field_values> GetFieldValues()
		{
			return fv_entity_fields;
		}
		public field_values AddFieldValues(field_values _item, bool _insertToStore = false)
		{
			if(fv_entity_fields.IndexOf(_item) != -1) return _item;
			fv_entity_fields.Add(_item);
			_item.field_id = id;
			if(_insertToStore && !Meridian.Default.field_valuesStore.Exists(_item.id))
			{
				Meridian.Default.field_valuesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public field_values RemoveFieldValues(field_values _item, bool _complete = false)
		{
			fv_entity_fields.Remove(_item);
			if(_complete) Meridian.Default.field_valuesStore.Delete(_item);
			return _item;
		}
		[ScriptIgnore]
		[ScaffoldColumn(false)]
		public List<fieldsets> fieldsets_items
		{
			get; set; 
		}
		public void add_fieldsets_item(long id)
		{
			if (Meridian.Default.fieldsetsStore.Exists(id))
			{
				if (!fieldsets_items.Any(s => s.id.Equals(id)))
				{
					fieldsets_items.Add(Meridian.Default.fieldsetsStore.Get(id));
					SaveCompositions(Meridian.Default);
				}
			}
		}
		public void remove_fieldsets_item(long id)
		{
			if (fieldsets_items.Any(s => s.id.Equals(id)))
			{
				fieldsets_items.Remove(fieldsets_items.Single(s => s.id.Equals(id)));;
				SaveCompositions(Meridian.Default);
			}
		}
	}
}
