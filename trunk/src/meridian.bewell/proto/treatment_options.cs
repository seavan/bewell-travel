/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.proto
{
	[MetadataType(typeof(treatment_options_meta))]	public partial class treatment_options : admin.db.IDatabaseEntity
	{
		public treatment_options()
		{
			sub_treatments = new List<treatment_options>();
			treatment_options_items = new List<hotels>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private long m_parent_id = 0;
		internal bool mc_parent_id { get; private set; }
		private bool m_show_on_sitemap = false;
		internal bool mc_show_on_sitemap { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_parent_id = _reader["parent_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("parent_id") : 0;
			mc_parent_id = false;
			m_show_on_sitemap = _reader["show_on_sitemap"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("show_on_sitemap") : false;
			mc_show_on_sitemap = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((parent_id > 0) && (_meridian.treatment_optionsStore.Exists(parent_id)))
			{
				this.sub_treatments_treatment_options = _meridian.treatment_optionsStore.Get(parent_id);;
				this.sub_treatments_treatment_options.AddSubTreatmentOptions(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.sub_treatments_treatment_options != null)
			{
				this.sub_treatments_treatment_options.RemoveSubTreatmentOptions(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "treatment_options"; }
		}
		/* metafile template 
		internal class treatment_options_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public long parent_id { get; set; }
			public bool show_on_sitemap { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public long parent_id
		{
			get
			{
				return m_parent_id;
			}
			set
			{
				if(m_parent_id != value)
				{
					m_parent_id = value != null ? value : 0;
					mc_parent_id = true;
					// call update worker thread;
				}
			}
		}
		public bool show_on_sitemap
		{
			get
			{
				return m_show_on_sitemap;
			}
			set
			{
				if(m_show_on_sitemap != value)
				{
					m_show_on_sitemap = value != null ? value : false;
					mc_show_on_sitemap = true;
					// call update worker thread;
				}
			}
		}
		private List<treatment_options> sub_treatments
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<treatment_options> SubTreatmentOptions
		{
			get { return sub_treatments; }
		}
		public IEnumerable<treatment_options> GetSubTreatmentOptions()
		{
			return sub_treatments;
		}
		public treatment_options AddSubTreatmentOptions(treatment_options _item, bool _insertToStore = false)
		{
			if(sub_treatments.IndexOf(_item) != -1) return _item;
			sub_treatments.Add(_item);
			_item.parent_id = id;
			if(_insertToStore && !Meridian.Default.treatment_optionsStore.Exists(_item.id))
			{
				Meridian.Default.treatment_optionsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public treatment_options RemoveSubTreatmentOptions(treatment_options _item, bool _complete = false)
		{
			sub_treatments.Remove(_item);
			if(_complete) Meridian.Default.treatment_optionsStore.Delete(_item);
			return _item;
		}
		private treatment_options sub_treatments_treatment_options
		{
			get; set; 
		}
		public treatment_options GetSubTreatmentOptionsTreatment_option()
		{
			return sub_treatments_treatment_options ;
		}
		[ScriptIgnore]
		[ScaffoldColumn(false)]
		public List<hotels> treatment_options_items
		{
			get; set; 
		}
		public void add_hotels_item(long id)
		{
			if (Meridian.Default.hotelsStore.Exists(id))
			{
				if (!treatment_options_items.Any(s => s.id.Equals(id)))
				{
					treatment_options_items.Add(Meridian.Default.hotelsStore.Get(id));
					SaveCompositions(Meridian.Default);
				}
			}
		}
		public void remove_hotels_item(long id)
		{
			if (treatment_options_items.Any(s => s.id.Equals(id)))
			{
				treatment_options_items.Remove(treatment_options_items.Single(s => s.id.Equals(id)));;
				SaveCompositions(Meridian.Default);
			}
		}
	}
}
