/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.proto
{
	[MetadataType(typeof(territories_meta))]	public partial class territories : admin.db.IDatabaseEntity
	{
		public territories()
		{
			sub_territories = new List<territories>();
			territory_resorts = new List<resorts>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private long m_parent_id = 0;
		internal bool mc_parent_id { get; private set; }
		private long m_category_id = 0;
		internal bool mc_category_id { get; private set; }
		private long m_nested_category_id = 0;
		internal bool mc_nested_category_id { get; private set; }
		private long m_item_order = 0;
		internal bool mc_item_order { get; private set; }
		private bool m_in_search = false;
		internal bool mc_in_search { get; private set; }
		private string m_map_key = "";
		internal bool mc_map_key { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_parent_id = _reader["parent_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("parent_id") : 0;
			mc_parent_id = false;
			m_category_id = _reader["category_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("category_id") : 0;
			mc_category_id = false;
			m_nested_category_id = _reader["nested_category_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("nested_category_id") : 0;
			mc_nested_category_id = false;
			m_item_order = _reader["item_order"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("item_order") : 0;
			mc_item_order = false;
			m_in_search = _reader["in_search"].GetType() != typeof(System.DBNull) ? _reader.GetBoolean("in_search") : false;
			mc_in_search = false;
			m_map_key = _reader["map_key"].GetType() != typeof(System.DBNull) ? _reader.GetString("map_key") : "";
			mc_map_key = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((parent_id > 0) && (_meridian.territoriesStore.Exists(parent_id)))
			{
				this.sub_territories_territories = _meridian.territoriesStore.Get(parent_id);;
				this.sub_territories_territories.AddSubTerritories(this);
			}
			if((category_id > 0) && (_meridian.territory_categoriesStore.Exists(category_id)))
			{
				this.category_territories_territory_categories = _meridian.territory_categoriesStore.Get(category_id);;
				this.category_territories_territory_categories.AddTerritories(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.sub_territories_territories != null)
			{
				this.sub_territories_territories.RemoveSubTerritories(this);
			}
			if(this.category_territories_territory_categories != null)
			{
				this.category_territories_territory_categories.RemoveTerritories(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "territories"; }
		}
		/* metafile template 
		internal class territories_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public long parent_id { get; set; }
			public long category_id { get; set; }
			public long nested_category_id { get; set; }
			public long item_order { get; set; }
			public bool in_search { get; set; }
			public string map_key { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public long parent_id
		{
			get
			{
				return m_parent_id;
			}
			set
			{
				if(m_parent_id != value)
				{
					m_parent_id = value != null ? value : 0;
					mc_parent_id = true;
					// call update worker thread;
				}
			}
		}
		public long category_id
		{
			get
			{
				return m_category_id;
			}
			set
			{
				if(m_category_id != value)
				{
					m_category_id = value != null ? value : 0;
					mc_category_id = true;
					// call update worker thread;
				}
			}
		}
		public long nested_category_id
		{
			get
			{
				return m_nested_category_id;
			}
			set
			{
				if(m_nested_category_id != value)
				{
					m_nested_category_id = value != null ? value : 0;
					mc_nested_category_id = true;
					// call update worker thread;
				}
			}
		}
		public long item_order
		{
			get
			{
				return m_item_order;
			}
			set
			{
				if(m_item_order != value)
				{
					m_item_order = value != null ? value : 0;
					mc_item_order = true;
					// call update worker thread;
				}
			}
		}
		public bool in_search
		{
			get
			{
				return m_in_search;
			}
			set
			{
				if(m_in_search != value)
				{
					m_in_search = value != null ? value : false;
					mc_in_search = true;
					// call update worker thread;
				}
			}
		}
		public string map_key
		{
			get
			{
				return m_map_key;
			}
			set
			{
				if(m_map_key != value)
				{
					m_map_key = value != null ? value : "";
					mc_map_key = true;
					// call update worker thread;
				}
			}
		}
		private List<territories> sub_territories
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<territories> SubTerritories
		{
			get { return sub_territories; }
		}
		public IEnumerable<territories> GetSubTerritories()
		{
			return sub_territories;
		}
		public territories AddSubTerritories(territories _item, bool _insertToStore = false)
		{
			if(sub_territories.IndexOf(_item) != -1) return _item;
			sub_territories.Add(_item);
			_item.parent_id = id;
			if(_insertToStore && !Meridian.Default.territoriesStore.Exists(_item.id))
			{
				Meridian.Default.territoriesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public territories RemoveSubTerritories(territories _item, bool _complete = false)
		{
			sub_territories.Remove(_item);
			if(_complete) Meridian.Default.territoriesStore.Delete(_item);
			return _item;
		}
		private List<resorts> territory_resorts
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<resorts> Resorts
		{
			get { return territory_resorts; }
		}
		public IEnumerable<resorts> GetResorts()
		{
			return territory_resorts;
		}
		public resorts AddResorts(resorts _item, bool _insertToStore = false)
		{
			if(territory_resorts.IndexOf(_item) != -1) return _item;
			territory_resorts.Add(_item);
			_item.territory_id = id;
			if(_insertToStore && !Meridian.Default.resortsStore.Exists(_item.id))
			{
				Meridian.Default.resortsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public resorts RemoveResorts(resorts _item, bool _complete = false)
		{
			territory_resorts.Remove(_item);
			if(_complete) Meridian.Default.resortsStore.Delete(_item);
			return _item;
		}
		private territories sub_territories_territories
		{
			get; set; 
		}
		public territories GetSubTerritoriesTerritorie()
		{
			return sub_territories_territories ;
		}
		private territory_categories category_territories_territory_categories
		{
			get; set; 
		}
		public territory_categories GetTerritoriesTerritory_categorie()
		{
			return category_territories_territory_categories ;
		}
	}
}
