/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.proto
{
	[MetadataType(typeof(pages_meta))]	public partial class pages : admin.db.IDatabaseEntity
	{
		public pages()
		{
			sub_pages = new List<pages>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private long m_parent_id = 0;
		internal bool mc_parent_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private DateTime m_publish_date = DateTime.MinValue;
		internal bool mc_publish_date { get; private set; }
		private string m_html = "";
		internal bool mc_html { get; private set; }
		private string m_alias = "";
		internal bool mc_alias { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_parent_id = _reader["parent_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("parent_id") : 0;
			mc_parent_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_publish_date = _reader["publish_date"].GetType() != typeof(System.DBNull) ? _reader.GetDateTime("publish_date") : DateTime.MinValue;
			mc_publish_date = false;
			m_html = _reader["html"].GetType() != typeof(System.DBNull) ? _reader.GetString("html") : "";
			mc_html = false;
			m_alias = _reader["alias"].GetType() != typeof(System.DBNull) ? _reader.GetString("alias") : "";
			mc_alias = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
			if((parent_id > 0) && (_meridian.pagesStore.Exists(parent_id)))
			{
				this.sub_pages_pages = _meridian.pagesStore.Get(parent_id);;
				this.sub_pages_pages.AddSubPages(this);
			}
		}
		public void DeleteAggregations()
		{
			if(this.sub_pages_pages != null)
			{
				this.sub_pages_pages.RemoveSubPages(this);
			}
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "pages"; }
		}
		/* metafile template 
		internal class pages_meta
		{
			public long id { get; set; }
			public long parent_id { get; set; }
			public string title { get; set; }
			public DateTime publish_date { get; set; }
			public string html { get; set; }
			public string alias { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public long parent_id
		{
			get
			{
				return m_parent_id;
			}
			set
			{
				if(m_parent_id != value)
				{
					m_parent_id = value != null ? value : 0;
					mc_parent_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public DateTime publish_date
		{
			get
			{
				return m_publish_date;
			}
			set
			{
				if(m_publish_date != value)
				{
					m_publish_date = value != null ? value : DateTime.MinValue;
					if(m_publish_date.Year < 1800) m_publish_date = DateTime.MinValue;
					mc_publish_date = true;
					// call update worker thread;
				}
			}
		}
		public string html
		{
			get
			{
				return m_html;
			}
			set
			{
				if(m_html != value)
				{
					m_html = value != null ? value : "";
					mc_html = true;
					// call update worker thread;
				}
			}
		}
		public string alias
		{
			get
			{
				return m_alias;
			}
			set
			{
				if(m_alias != value)
				{
					m_alias = value != null ? value : "";
					mc_alias = true;
					// call update worker thread;
				}
			}
		}
		private List<pages> sub_pages
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<pages> SubPages
		{
			get { return sub_pages; }
		}
		public IEnumerable<pages> GetSubPages()
		{
			return sub_pages;
		}
		public pages AddSubPages(pages _item, bool _insertToStore = false)
		{
			if(sub_pages.IndexOf(_item) != -1) return _item;
			sub_pages.Add(_item);
			_item.parent_id = id;
			if(_insertToStore && !Meridian.Default.pagesStore.Exists(_item.id))
			{
				Meridian.Default.pagesStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public pages RemoveSubPages(pages _item, bool _complete = false)
		{
			sub_pages.Remove(_item);
			if(_complete) Meridian.Default.pagesStore.Delete(_item);
			return _item;
		}
		private pages sub_pages_pages
		{
			get; set; 
		}
		public pages GetSubPagesPage()
		{
			return sub_pages_pages ;
		}
	}
}
