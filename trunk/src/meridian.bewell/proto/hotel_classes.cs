/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.proto
{
	[MetadataType(typeof(hotel_classes_meta))]	public partial class hotel_classes : admin.db.IDatabaseEntity
	{
		public hotel_classes()
		{
			class_hotels = new List<hotels>();
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private string m_title = "";
		internal bool mc_title { get; private set; }
		private int m_stars = 0;
		internal bool mc_stars { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_title = _reader["title"].GetType() != typeof(System.DBNull) ? _reader.GetString("title") : "";
			mc_title = false;
			m_stars = _reader["stars"].GetType() != typeof(System.DBNull) ? _reader.GetInt32("stars") : 0;
			mc_stars = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
		}
		public void DeleteAggregations()
		{
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "hotel_classes"; }
		}
		/* metafile template 
		internal class hotel_classes_meta
		{
			public long id { get; set; }
			public string title { get; set; }
			public int stars { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public string title
		{
			get
			{
				return m_title;
			}
			set
			{
				if(m_title != value)
				{
					m_title = value != null ? value : "";
					mc_title = true;
					// call update worker thread;
				}
			}
		}
		public int stars
		{
			get
			{
				return m_stars;
			}
			set
			{
				if(m_stars != value)
				{
					m_stars = value != null ? value : 0;
					mc_stars = true;
					// call update worker thread;
				}
			}
		}
		private List<hotels> class_hotels
		{
			get; set; 
		}
		[ScriptIgnore]
		public IEnumerable<hotels> Hotels
		{
			get { return class_hotels; }
		}
		public IEnumerable<hotels> GetHotels()
		{
			return class_hotels;
		}
		public hotels AddHotels(hotels _item, bool _insertToStore = false)
		{
			if(class_hotels.IndexOf(_item) != -1) return _item;
			class_hotels.Add(_item);
			_item.class_id = id;
			if(_insertToStore && !Meridian.Default.hotelsStore.Exists(_item.id))
			{
				Meridian.Default.hotelsStore.Insert(_item);
				_item.LoadAggregations(Meridian.Default);
			}
			return _item;
		}
		public hotels RemoveHotels(hotels _item, bool _complete = false)
		{
			class_hotels.Remove(_item);
			if(_complete) Meridian.Default.hotelsStore.Delete(_item);
			return _item;
		}
	}
}
