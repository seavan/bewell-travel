/* Automatically generated codefile, Meridian
 * Generated by magic, please do not interfere
 * Please sleep well and do not smoke. Love, Sam */

using System;
using System.Linq;
using System.Text;
using System.Data.Linq;
using System.Collections.Generic;
using System.ComponentModel.DataAnnotations;
using System.Web.Script.Serialization;
using MySql.Data.MySqlClient;
using meridian.bewell;
using meridian.bewell.system;

namespace meridian.bewell.proto
{
	[MetadataType(typeof(prices_meta))]	public partial class prices : admin.db.IDatabaseEntity
	{
		public prices()
		{
		}
		private long m_id = 0;
		internal bool mc_id { get; private set; }
		private long m_entity_id = 0;
		internal bool mc_entity_id { get; private set; }
		private string m_proto_name = "";
		internal bool mc_proto_name { get; private set; }
		private byte m_month = (byte)0;
		internal bool mc_month { get; private set; }
		private double m_price = (double)0;
		internal bool mc_price { get; private set; }
		private string m_comment = "";
		internal bool mc_comment { get; private set; }
		public void LoadFromReader(MySqlDataReader _reader)
		{
			m_id = _reader["id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("id") : 0;
			mc_id = false;
			m_entity_id = _reader["entity_id"].GetType() != typeof(System.DBNull) ? _reader.GetInt64("entity_id") : 0;
			mc_entity_id = false;
			m_proto_name = _reader["proto_name"].GetType() != typeof(System.DBNull) ? _reader.GetString("proto_name") : "";
			mc_proto_name = false;
			m_month = _reader["month"].GetType() != typeof(System.DBNull) ? _reader.GetByte("month") : (byte)0;
			mc_month = false;
			m_price = _reader["price"].GetType() != typeof(System.DBNull) ? _reader.GetFloat("price") : (double)0;
			mc_price = false;
			m_comment = _reader["comment"].GetType() != typeof(System.DBNull) ? _reader.GetString("comment") : "";
			mc_comment = false;
		}
		public void LoadAggregations(Meridian _meridian)
		{
		}
		public void DeleteAggregations()
		{
		}
		public void LoadCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public void SaveCompositions(Meridian _meridian)
		{
		}
		public void DeleteCompositions(Meridian _meridian)
		{
			string[] keyIds = null;
		}
		public string ProtoName
		{
			get { return "prices"; }
		}
		/* metafile template 
		internal class prices_meta
		{
			public long id { get; set; }
			public long entity_id { get; set; }
			public string proto_name { get; set; }
			public byte month { get; set; }
			public double price { get; set; }
			public string comment { get; set; }
		}
		 metafile template */
		public long id
		{
			get
			{
				return m_id;
			}
			set
			{
				if(m_id != value)
				{
					m_id = value != null ? value : 0;
					mc_id = true;
					// call update worker thread;
				}
			}
		}
		public long entity_id
		{
			get
			{
				return m_entity_id;
			}
			set
			{
				if(m_entity_id != value)
				{
					m_entity_id = value != null ? value : 0;
					mc_entity_id = true;
					// call update worker thread;
				}
			}
		}
		public string proto_name
		{
			get
			{
				return m_proto_name;
			}
			set
			{
				if(m_proto_name != value)
				{
					m_proto_name = value != null ? value : "";
					mc_proto_name = true;
					// call update worker thread;
				}
			}
		}
		public byte month
		{
			get
			{
				return m_month;
			}
			set
			{
				if(m_month != value)
				{
					m_month = value != null ? value : (byte)0;
					mc_month = true;
					// call update worker thread;
				}
			}
		}
		public double price
		{
			get
			{
				return m_price;
			}
			set
			{
				if(m_price != value)
				{
					m_price = value != null ? value : (double)0;
					mc_price = true;
					// call update worker thread;
				}
			}
		}
		public string comment
		{
			get
			{
				return m_comment;
			}
			set
			{
				if(m_comment != value)
				{
					m_comment = value != null ? value : "";
					mc_comment = true;
					// call update worker thread;
				}
			}
		}
	}
}
